<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈小黑的blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tmgycsz.github.io/"/>
  <updated>2019-03-04T07:33:09.144Z</updated>
  <id>https://tmgycsz.github.io/</id>
  
  <author>
    <name>Jack Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义IconFont图标</title>
    <link href="https://tmgycsz.github.io/2019/03/04/%E8%87%AA%E5%AE%9A%E4%B9%89IconFont%E5%9B%BE%E6%A0%87/"/>
    <id>https://tmgycsz.github.io/2019/03/04/自定义IconFont图标/</id>
    <published>2019-03-04T06:55:07.195Z</published>
    <updated>2019-03-04T07:33:09.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的项目中，很多小的icon图片都是通过利用i标签的特性给它设置固定的宽高和背景来实现的。这种方法在项目大的时候一来需要依赖的图片会很多，二来css代码如果不规范的话也会出现很多问题。所以现在我在新项目中选择了阿里巴巴的矢量图标库来实现自定义IconFont 图标。<br><a id="more"></a></p><h2 id="如何获取图标"><a href="#如何获取图标" class="headerlink" title="如何获取图标"></a>如何获取图标</h2><ol><li>首先我们进入阿里巴巴的矢量图标库Iconfont，<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里矢量图标库</a>，注册账号并登录。</li><li><p>在【图标管理&gt;我的项目】中新建项目。<br> <img src="https://i.imgur.com/xDC9Gbv.png" alt><br> FontClass/Symbol 前缀是用来设置添加到项目中的icon的前缀名。而Font Family是用来设置字体图标的统一样式的。在后面的详细代码中可以看到具体作用。</p><p> <img src="https://i.imgur.com/LVVFrAy.png" alt>   </p></li><li><p>在图标库中添加指定的图标到我的项目中</p><ul><li><p>添加选好的图标到购物车</p><p><img src="https://i.imgur.com/IpA4VuL.png" alt></p></li><li><p>在购物车中添加到指定项目中</p><p><img src="https://i.imgur.com/vLos18J.png" alt>    </p></li></ul></li><li><p>进入我的项目<br> 这里有3种格式，Unicode/Font Class/Symbol。其中Unicode图标的描述就是对应的字体编码，而另外两种就是我们新建项目时设置的前缀名加上图标的本身描述。这个可以修改。<br> <img src="https://i.imgur.com/iiPIwxG.png" alt></p></li><li><p>点击下载会下载一个压缩包到本地。</p></li></ol><h2 id="修改下载文件"><a href="#修改下载文件" class="headerlink" title="修改下载文件"></a>修改下载文件</h2><p>解压压缩包。里面会有9个文件，有帮助使用的html本地文件和我们要引入的iconfont.css和iconfont.js文件。</p><ol><li><p>iconfont.css详情</p><p><img src="https://i.imgur.com/wmhlUE6.png" alt></p></li><li>修改iconfont.css，加上下面的代码去设置图标的大小和样式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[class^=&quot;el-icon-csz&quot;], [class*=&quot; el-icon-csz&quot;] &#123;</span><br><span class="line">/* 这个字段有可能是fontFamily也有可能是iconfont，具体与下载下来的iconfont.css中保持一致 */</span><br><span class="line">   font-family:&quot;fontFamily&quot; !important;</span><br><span class="line">   /* 以下内容参照第三方图标库本身的规则 */</span><br><span class="line">   font-size: 18px;</span><br><span class="line">   font-style:normal;</span><br><span class="line">   -webkit-font-smoothing: antialiased;</span><br><span class="line">   -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用方式1-v-cli项目中引用"><a href="#使用方式1-v-cli项目中引用" class="headerlink" title="使用方式1(v-cli项目中引用)"></a>使用方式1(v-cli项目中引用)</h2><h3 id="unicode引用"><a href="#unicode引用" class="headerlink" title="unicode引用"></a>unicode引用</h3><ol><li>unicode是字体在网页端最原始的应用方式，特点是：<ul><li>兼容性最好，支持ie6+，及所有现代浏览器。</li><li>支持按字体的方式去动态调整图标大小，颜色等等。</li><li>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。</li><li>注意：新版iconfont支持多色图标，这些多色图标在unicode模式下将不能使用，如果有需求建议使用symbol的引用方式</li></ul></li><li><p>unicode使用步骤如下：<br> 第一步：在v-cli项目main.js中引入iconfont.css。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./assets/icon/iconfont.css&apos;;</span><br></pre></td></tr></table></figure><p> 第二步：挑选相应图标并获取字体编码，应用于页面</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;fontFamily&quot;&gt;&amp;#xe6e1;&lt;/i&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="font-class引用"><a href="#font-class引用" class="headerlink" title="font-class引用"></a>font-class引用</h3><ol><li>font-class是unicode使用方式的一种变种，主要是解决unicode书写不直观，语意不明确的问题；与unicode使用方式相比，具有如下特点：<ul><li>兼容性良好，支持ie8+，及所有现代浏览器。</li><li>相比于unicode语意明确，书写更直观。可以很容易分辨这个icon是什么。</li><li>因为使用class来定义图标，所以当要替换图标时，只需要修改class里面的unicode引用。</li><li>不过因为本质上还是使用的字体，所以多色图标还是不支持的。</li></ul></li><li><p>使用步骤如下：<br> 第一步：再v-cli项目main.js中引入iconfont.css。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./assets/icon/iconfont.css&apos;;</span><br></pre></td></tr></table></figure><p> 第二步：挑选相应图标并获取类名，应用于页面：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;el-icon-csz-xxx&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：这里不用加fontFamily是因为在（2 修改下载文件）中对前缀为el-icon-csz的样式进行了设置。</strong></p><h3 id="symbol引用"><a href="#symbol引用" class="headerlink" title="symbol引用"></a>symbol引用</h3><ol><li>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个svg的集合，与另外两种相比具有如下特点：<ul><li>支持多色图标了，不再受单色限制。</li><li>通过一些技巧，支持像字体那样，通过font-size,color来调整样式。</li><li>兼容性较差，支持 ie9+,及现代浏览器。</li><li>浏览器渲染svg的性能一般，还不如png。</li></ul></li><li><p>使用步骤如下：<br> 第一步：引入项目下面生成的symbol代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./assets/icon/iconfont.js&apos;;</span><br></pre></td></tr></table></figure><p> 第二步：在公用的main.css加入通用css代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.icon &#123;</span><br><span class="line">   width: 1em; height: 1em;</span><br><span class="line">   vertical-align: -0.15em;</span><br><span class="line">   fill: currentColor;</span><br><span class="line">   overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第三步：挑选相应图标并获取类名，应用于页面：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">  &lt;use xlink:href=&quot;#el-icon-csz-xxx&quot;&gt;&lt;/use&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用方式2-普通页面使用"><a href="#使用方式2-普通页面使用" class="headerlink" title="使用方式2(普通页面使用)"></a>使用方式2(普通页面使用)</h2><p>压缩包中的demo_index.html文件就是使用方式的帮助文档。可以按照他的教程进行引入。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有什么不对的地方欢迎大家评论指出…</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在之前的项目中，很多小的icon图片都是通过利用i标签的特性给它设置固定的宽高和背景来实现的。这种方法在项目大的时候一来需要依赖的图片会很多，二来css代码如果不规范的话也会出现很多问题。所以现在我在新项目中选择了阿里巴巴的矢量图标库来实现自定义IconFont 图标。&lt;br&gt;
    
    </summary>
    
      <category term="常用工具" scheme="https://tmgycsz.github.io/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="常用工具之图标" scheme="https://tmgycsz.github.io/tags/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%B9%8B%E5%9B%BE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>编写可拖拽的弹窗</title>
    <link href="https://tmgycsz.github.io/2019/03/04/%E7%BC%96%E5%86%99%E5%8F%AF%E6%8B%96%E6%8B%BD%E7%9A%84%E5%BC%B9%E7%AA%97/"/>
    <id>https://tmgycsz.github.io/2019/03/04/编写可拖拽的弹窗/</id>
    <published>2019-03-04T06:09:28.486Z</published>
    <updated>2019-03-04T06:42:10.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可拖拽的弹窗"><a href="#可拖拽的弹窗" class="headerlink" title="可拖拽的弹窗"></a>可拖拽的弹窗</h2><blockquote><p>在刚刚重构完的项目中使用到了element ui框架，踩了不少坑也学到了不少的东西。其中比较麻烦的是它的dialog弹窗组件是无法移动拖拽的，然而客户又强烈的要求一定要有这个功能，所以就自己写了个可拖拽的弹窗组件。虽然拖拽起来不是很流畅，但是也算是满足要求了。</p></blockquote><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>主要的实现原理还是获取鼠标在div中的位置，获取位置后设置div的left和top来达到div跟随鼠标移动的效果。因为写的是vue，所以利用了vue的自定义指令来操作dom。</p><a id="more"></a><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="设计盒子ui"><a href="#设计盒子ui" class="headerlink" title="设计盒子ui"></a>设计盒子ui</h3><ol><li><p>老实说，我经常被吐槽没有审美，设计的样式总是被喷。好在这次是dialog弹窗，网上有大把的参考样式。我大体参考了layer的弹窗做出了一个山寨弹窗。</p><ul><li><p>html代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div class=&quot;m_showBox&quot; :class=&quot;skin&quot;&gt;</span><br><span class="line">   &lt;div class=&quot;showBox_mask&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;loading_wrap&quot; v-if=&quot;buttonstatus === 1&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;pop_box&quot; id=&quot;pox-box&quot; v-drag&gt;</span><br><span class="line">     &lt;p class=&quot;pop_box_title&quot;&gt;</span><br><span class="line">       &#123;&#123;title || &quot;提示&quot;&#125;&#125;</span><br><span class="line">       &lt;span class=&quot;pop_box_close&quot; @click=&quot;cancel&quot;&gt;&lt;/span&gt;</span><br><span class="line">     &lt;/p&gt;</span><br><span class="line">     &lt;div class=&quot;pop_box_content&quot;&gt;</span><br><span class="line">       &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;div class=&quot;pop_box_bottom&quot;&gt;</span><br><span class="line">       &lt;a href=&quot;javascript:;&quot;</span><br><span class="line">          class=&quot;cancel_btn&quot;</span><br><span class="line">          @click=&quot;cancel&quot;&gt;&#123;&#123;canceltext || &quot;取消&quot;&#125;&#125;&lt;/a&gt;</span><br><span class="line">       &lt;a href=&quot;javascript:;&quot;</span><br><span class="line">          class=&quot;confirm_btn&quot;</span><br><span class="line">          v-if=&quot;type === &apos;confirm&apos;&quot;</span><br><span class="line">          :class=&quot;&#123;widths: buttonstatus === 1&#125;&quot;</span><br><span class="line">          @click=&quot;confirm&quot;&gt;</span><br><span class="line">         &lt;svg viewBox=&quot;25 25 50 50&quot; class=&quot;u-circular&quot; v-if=&quot;buttonstatus === 1&quot;&gt;</span><br><span class="line">           &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;20&quot; fill=&quot;none&quot; class=&quot;path&quot;&gt;&lt;/circle&gt;</span><br><span class="line">         &lt;/svg&gt;</span><br><span class="line">         &lt;span :class=&quot;&#123;&apos;marginLeft&apos;: buttonstatus === 1&#125;&quot;&gt;&#123;&#123;confirmtext || &apos;确定&apos;&#125;&#125;&lt;/span&gt;</span><br><span class="line">       &lt;/a&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>css代码太长放到github上了<a href="https://github.com/tmgycsz/blog.demo/blob/master/vue.demo/vue.drag/dragDiv.vue" target="_blank" rel="noopener">vueDrag.vue</a></p></li><li><p>效果图：</p><p><img src="https://i.imgur.com/1bu5Wpm.png" alt></p></li></ul></li><li><p>设计要点:</p><ul><li>背景遮罩<br>我这里选择了使用了3个遮罩板，第一块是覆盖全屏幕的白色遮罩（m_showBox）使用fixed定位，让弹窗的所有内容与浏览器之间不会出现留白。第2块就是上图看到的灰色背景（showBox_mask），用来突显弹窗。最后一块是点击确定的遮罩窗（loading_wrap），来防止提交ajax时，用户点击按钮或修改弹窗数据。</li><li>弹窗构成<br>这里的弹窗就包括标题，内容和底部部分。内容部分通过插槽插入内容，底部按钮通过svg来实现提交加载的loading效果。</li></ul></li></ol><h3 id="定义组件props"><a href="#定义组件props" class="headerlink" title="定义组件props"></a>定义组件props</h3><p>通过传入的props值来设置弹窗的样式和文案。<br><img src="https://i.imgur.com/OvvFamE.png" alt></p><h3 id="自定义事件实现按钮回调"><a href="#自定义事件实现按钮回调" class="headerlink" title="自定义事件实现按钮回调"></a>自定义事件实现按钮回调</h3><p>confirm和cancel自定义事件，定义自定义按钮事件，使用$emit触发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    cancel: function () &#123;</span><br><span class="line">      this.$emit(&quot;cancel&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    confirm: function () &#123;</span><br><span class="line">      if (this.buttonstatus === 1) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      this.$emit(&quot;confirm&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="自定义指令drag实现拖拽效果"><a href="#自定义指令drag实现拖拽效果" class="headerlink" title="自定义指令drag实现拖拽效果"></a>自定义指令drag实现拖拽效果</h3><h4 id="vue的directives。"><a href="#vue的directives。" class="headerlink" title="vue的directives。"></a>vue的directives。</h4><p>通过vue自定义指令获取绑定的元素，在对DOM进行操作。关于更多vue自定义指令用法，移步<a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></p><h4 id="相关属性-事件对象event，dom元素，window对象-。"><a href="#相关属性-事件对象event，dom元素，window对象-。" class="headerlink" title="相关属性(事件对象event，dom元素，window对象)。"></a>相关属性(事件对象event，dom元素，window对象)。</h4><ol><li>event.clientX：clientX事件属性返回当事件被触发时鼠标指针向对于浏览器可视区域的水平坐标。</li><li>event.clientY：clientY事件属性返回当事件被触发时鼠标指针向对于浏览器页面可视区域的垂直坐标。</li><li>offsetLeft/offsetLeftTop属性：可以返回当前元素距离某个定位父辈元素左边与顶部的距离（虽然我的父级遮罩层有了定位，但是它的宽高都是与body保持一致的）。</li><li>offsetWidth/offsetHeight: 返回任何一个元素宽/高度，包括边框和填充</li><li>window.innerHeight/Width: 获取当前页面可视区的宽高（包括滚动条）。</li></ol><h4 id="相关事件"><a href="#相关事件" class="headerlink" title="相关事件"></a>相关事件</h4><p><img src="https://i.imgur.com/w2reN9e.png" alt></p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">      drag: &#123;</span><br><span class="line">        inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">          vnode = vnode.elm;</span><br><span class="line">          el.onmousedown = <span class="function">(<span class="params">(event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.target.className !== <span class="string">"pop_box_title"</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取鼠标在盒子中的位置</span></span><br><span class="line">            <span class="keyword">let</span> mouseX = event.clientX - vnode.offsetLeft;</span><br><span class="line">            <span class="keyword">let</span> mouseY = event.clientY - vnode.offsetTop;</span><br><span class="line">            <span class="comment">//绑定移动和停止函数</span></span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="function">(<span class="params">(event</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> left, top;</span><br><span class="line">              <span class="comment">//获取新的鼠标位置对应下的盒子应该在的位置</span></span><br><span class="line">              left = event.clientX - mouseX;</span><br><span class="line">              top = event.clientY - mouseY;</span><br><span class="line">              <span class="comment">//获取div在页面中X轴的最小最大位置</span></span><br><span class="line">              <span class="keyword">let</span> minX = vnode.offsetWidth / <span class="number">2</span>;</span><br><span class="line">              <span class="keyword">let</span> maxX = (<span class="built_in">window</span>.innerWidth - vnode.offsetWidth / <span class="number">2</span>) - <span class="number">10</span><span class="comment">//去掉滚动条的宽度</span></span><br><span class="line">              <span class="keyword">if</span> (left &lt;= minX) &#123;</span><br><span class="line">                left = minX;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt;= maxX) &#123;</span><br><span class="line">                left = maxX;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//获取div在页面中Y轴的最大最小位置</span></span><br><span class="line">              <span class="keyword">let</span> minY = vnode.offsetHeight / <span class="number">2</span>;</span><br><span class="line">              <span class="keyword">let</span> maxY = (<span class="built_in">window</span>.innerHeight - vnode.offsetHeight / <span class="number">2</span>);</span><br><span class="line">              <span class="keyword">if</span> (top &lt;= minY) &#123;</span><br><span class="line">                top = minY;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt;= maxY) &#123;</span><br><span class="line">                top = maxY;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//赋值移动</span></span><br><span class="line">              vnode.style.left = left + <span class="string">'px'</span>;</span><br><span class="line">              vnode.style.top = top + <span class="string">'px'</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="built_in">document</span>.onmouseup = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="built_in">document</span>.onmousemove = <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="built_in">window</span>.onresize = <span class="function">(<span class="params">(</span>) =&gt;</span>&#123;</span><br><span class="line">            vnode.style.left = <span class="string">"50%"</span>;</span><br><span class="line">            vnode.style.top = <span class="string">"50%"</span>;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h4><ol><li>给弹窗绑定onmousedown事件，获取到鼠标在弹窗中的位置（以弹窗左上角为原点）。</li><li>document绑定onmousemove事件，获取当前的鼠标位置，当前鼠标位置减去鼠标在弹窗的相当位置即可得到此时弹窗应该处于的位置。然后在通过style设置弹窗的位置。</li><li>鼠标松开解绑document的鼠标事件。</li></ol><blockquote><p>注意点：</p></blockquote><ol><li>弹窗要一直在页面可视区移动，最大的移动距离就是可视区的宽高减去盒子本身的宽高(还要考虑到浏览器的滚动条的宽高，我的浏览器滚动条是自己设置的，高度为0，宽度为10)。<br>window.innerHeight - vnode.offsetHeight / 2;<br>(window.innerWidth - vnode.offsetWidth / 2) - 10;</li><li>只有弹窗标题才能拖拽，所以判断非标题部分之间return。</li><li>浏览器窗口大小改变会影响弹窗的位置，监听改变浏览器窗口改变把弹窗居中。</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>下载drag.vue。<a href="https://github.com/tmgycsz/blog.demo/blob/master/vue.demo/vue.drag/dragDiv.vue" target="_blank" rel="noopener">vueDrag.vue</a>。</li><li><p>使用import引入 </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vDrag <span class="keyword">from</span> <span class="string">"./dragDiv.vue"</span></span><br></pre></td></tr></table></figure></li><li><p>控制弹窗的显示隐藏通过v-if绑定data里的数据即可。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=<span class="string">"el-fade-in"</span>&gt;</span><br><span class="line">    &lt;v-drag v-<span class="keyword">if</span>=<span class="string">"isShow"</span> :tilte=<span class="string">"title"</span> :type=<span class="string">"type"</span> @confirm=<span class="string">"confirmSubmit"</span> @cancel=<span class="string">"cancel"</span> :buttonstatus=<span class="string">"buttonstatus"</span>&gt;</span><br><span class="line">      &lt;el-form label-width=<span class="string">"100px"</span>&gt;</span><br><span class="line">        &lt;el-form-item label=<span class="string">"用户名称："</span>&gt;</span><br><span class="line">          &lt;el-input placeholder=<span class="string">"请输入用户名"</span> v-model=<span class="string">"username"</span>&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="密码："&gt;</span><br><span class="line">          &lt;el-input placeholder="请输入密码" v-model="password"&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/v-drag&gt;</span><br><span class="line"> &lt;/transition&gt;</span><br></pre></td></tr></table></figure><p> <img src="https://i.imgur.com/sq7O9eP.png" alt></p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>关于这个组件我觉得还有很多优化的地方，望各位大佬给出意见。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;可拖拽的弹窗&quot;&gt;&lt;a href=&quot;#可拖拽的弹窗&quot; class=&quot;headerlink&quot; title=&quot;可拖拽的弹窗&quot;&gt;&lt;/a&gt;可拖拽的弹窗&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在刚刚重构完的项目中使用到了element ui框架，踩了不少坑也学到了不少的东西。其中比较麻烦的是它的dialog弹窗组件是无法移动拖拽的，然而客户又强烈的要求一定要有这个功能，所以就自己写了个可拖拽的弹窗组件。虽然拖拽起来不是很流畅，但是也算是满足要求了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;主要的实现原理还是获取鼠标在div中的位置，获取位置后设置div的left和top来达到div跟随鼠标移动的效果。因为写的是vue，所以利用了vue的自定义指令来操作dom。&lt;/p&gt;
    
    </summary>
    
      <category term="vue组件" scheme="https://tmgycsz.github.io/categories/vue%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="vue组件" scheme="https://tmgycsz.github.io/tags/vue%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tmgycsz.github.io/2019/02/27/hello-world/"/>
    <id>https://tmgycsz.github.io/2019/02/27/hello-world/</id>
    <published>2019-02-27T06:14:46.215Z</published>
    <updated>2019-03-04T07:48:00.062Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new page&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hello" scheme="https://tmgycsz.github.io/categories/hello/"/>
    
    
      <category term="hello" scheme="https://tmgycsz.github.io/tags/hello/"/>
    
  </entry>
  
</feed>
