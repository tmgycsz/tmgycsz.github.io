<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈小黑的blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tmgycsz.github.io/"/>
  <updated>2019-04-18T06:43:08.805Z</updated>
  <id>https://tmgycsz.github.io/</id>
  
  <author>
    <name>Jack Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue实现国际化</title>
    <link href="https://tmgycsz.github.io/2019/04/18/vue%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <id>https://tmgycsz.github.io/2019/04/18/vue实现国际化/</id>
    <published>2019-04-18T06:34:07.210Z</published>
    <updated>2019-04-18T06:43:08.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近的一个项目要给到国外的运营人员使用，所以需要实现国际化。这里就简单介绍一下<code>v-cli</code>实现国际化的原理和需要注意的问题</p></blockquote><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>主要的实现原理是利用<a href="http://kazupon.github.io/vue-i18n/zh/" target="_blank" rel="noopener">vue-i18n</a>这个<code>vue</code>插件，配合官方文档可以帮助我们很方便的实现国际化。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="安装vue-i18n插件"><a href="#安装vue-i18n插件" class="headerlink" title="安装vue-i18n插件"></a>安装<code>vue-i18n</code>插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-i18n --save</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用vue-i18n"><a href="#使用vue-i18n" class="headerlink" title="使用vue-i18n"></a>使用<code>vue-i18n</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//HTML</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"> &lt;p&gt;&#123;&#123; $t(&quot;message.hello&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//JAVASCRIPT</span><br><span class="line">const messages = &#123;</span><br><span class="line">  en: &#123;</span><br><span class="line">    message: &#123;</span><br><span class="line">      hello: &apos;hello world&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ja: &#123;</span><br><span class="line">    message: &#123;</span><br><span class="line">      hello: &apos;こんにちは、世界&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const i18n = new VueI18n(&#123;</span><br><span class="line">  locale: &apos;ja&apos;, // set locale</span><br><span class="line">  messages, // set locale messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Vue(&#123; i18n &#125;).$mount(&apos;#app&apos;)</span><br><span class="line"></span><br><span class="line">//OUTPUT</span><br><span class="line">&lt;div id=&quot;#app&quot;&gt;</span><br><span class="line">  &lt;p&gt;こんにちは、世界&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，我们在实例化Vue的时候，将i18n当做一个option传了进去。之后我们就可以在vue的组件里使用i18n了，使用方法：</p></blockquote><ul><li>在组件的<code>template</code>中，调用<code>$t()</code>方法</li></ul><h3 id="v-cli项目中使用"><a href="#v-cli项目中使用" class="headerlink" title="v-cli项目中使用"></a><code>v-cli</code>项目中使用</h3><ol><li><code>src</code>目录下新增<code>language</code>目录，<code>language</code>目录下新增<code>index.js</code>,<code>en.js</code>, <code>zh.js</code>。<br><code>en.js</code>和<code>zh.js</code>就是我们的语言包。必须保证语言包的内容是一一对应的。然后我们在<code>index.js</code>中完成设置。</li><li><p><code>index.js</code>加入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import VueI18n from &apos;vue-i18n&apos;;</span><br><span class="line">import locale from &apos;element-ui/lib/locale&apos;;</span><br><span class="line">import enLocale from &apos;element-ui/lib/locale/lang/en&apos;;</span><br><span class="line">import zhLocale from &apos;element-ui/lib/locale/lang/zh-CN&apos;;</span><br><span class="line">import en from &apos;./en&apos;;</span><br><span class="line">import zh from &apos;./zh&apos;;</span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n);</span><br><span class="line">const DEFAULT_LANG = &apos;zh&apos;;</span><br><span class="line">const LOCALE_KEY = &apos;localeLanguage&apos;;</span><br><span class="line">const locales = &#123;</span><br><span class="line">  zh: &#123;</span><br><span class="line">    ...zh,</span><br><span class="line">    ...zhLocale,</span><br><span class="line">  &#125;,</span><br><span class="line">  en: &#123;</span><br><span class="line">    ...en,</span><br><span class="line">    ...enLocale,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const i18n = new VueI18n(&#123;</span><br><span class="line">  locale: DEFAULT_LANG,</span><br><span class="line">  messages: locales</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export const setup = lang =&gt; &#123;</span><br><span class="line">  if (lang === undefined) &#123;</span><br><span class="line">    lang = window.localStorage.getItem(LOCALE_KEY);</span><br><span class="line">    if (locales[lang] === undefined) &#123;</span><br><span class="line">      lang = DEFAULT_LANG;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  window.localStorage.setItem(LOCALE_KEY, lang);</span><br><span class="line">  </span><br><span class="line">  Object.keys(locales).forEach(lang =&gt; &#123;</span><br><span class="line">    document.body.classList.remove(`lang-$&#123;lang&#125;`);</span><br><span class="line">  &#125;)</span><br><span class="line">  document.body.classList.add(`lang-$&#123;lang&#125;`);</span><br><span class="line">  document.body.setAttribute(&apos;lang&apos;, lang);</span><br><span class="line">  Vue.config.lang = lang;</span><br><span class="line">  i18n.locale = lang;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setup();</span><br><span class="line">// window.i18n = i18n;</span><br><span class="line">locale.i18n((key, keypath) =&gt; i18n.t(key, keypath));</span><br><span class="line">export default i18n;</span><br></pre></td></tr></table></figure></li><li><p>代码说明</p></li></ol><ul><li>因为是要配合element使用，所以必须也导入element的语言包并配置，具体更多实施方案请见<a href="https://element.eleme.cn/2.0/#/zh-CN/component/i18n" target="_blank" rel="noopener">element国际化</a>。</li><li>为了记住用户的习惯我们这里在localStorage中加入语言的缓存。保存用户切换的语言。避免重新进入时语言需要切换。</li><li>英文文案大多相较过长，为了避免切换时页面适配出现问题我们可以在body上添加类名和自定义属性来适配不同语言。<br><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/i18n-1.png" alt></li></ul><ol start="4"><li><p><code>main.js</code>引入<code>index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./app.vue&apos;</span><br><span class="line">import store from &apos;./store&apos;</span><br><span class="line">import router from &apos;./router&apos;</span><br><span class="line">import i18n from &apos;./language/index&apos;;</span><br><span class="line">export const app = new Vue(&#123;</span><br><span class="line">  i18n,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&quot;#app&quot;);</span><br></pre></td></tr></table></figure></li><li><p>配置语言包</p></li></ol><ul><li><p><code>en.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  m: &#123; </span><br><span class="line">      home: &apos;首页&apos;，</span><br><span class="line">      music: &apos;音乐&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>zh.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  m: &#123; </span><br><span class="line">      home: &apos;home&apos;，</span><br><span class="line">      music: &apos;music&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>至此，国际化的配置完成，我们就可以项目中使用了。</p></blockquote><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li><p>作为普通文本使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; $t(&apos;m.home&apos;) &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>配合属性使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:placeholder =&quot;$t(&apos;m.home&apos;)&quot;</span><br></pre></td></tr></table></figure></li><li><p>vue实例中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$t(&apos;m.home&apos;)`</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h2><h3 id="非vue实例的js中使用"><a href="#非vue实例的js中使用" class="headerlink" title="非vue实例的js中使用"></a>非<code>vue</code>实例的<code>js</code>中使用</h3><p>日常中我们会封装一些<code>code.js</code>和<code>tools.js</code>。这些<code>js</code>并不能使用<code>vue</code>实例上的方法。但是也需要国际化。这个时候我们只能单独导入<code>i18n</code>来使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import i18n from &apos;../language/index&apos;;</span><br><span class="line">i18n.t(&apos;m.home&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="长文案加变量的翻译问题"><a href="#长文案加变量的翻译问题" class="headerlink" title="长文案加变量的翻译问题"></a>长文案加变量的翻译问题</h3><ul><li>在翻译这样一句话 <code>我被用户 xxx 拉进一个群聊</code>的时候。英文的翻译是<code>I was dragged into a group chat by user xxx</code>。xxx出现的地方不一致这个时候我们就不能简单的直接设置<code>en.js</code>和<code>zh,js</code>进行转换。</li><li>我们这里可以把这变量用一个字符替换，然后封装函数匹配变量进行替换 <code>我被用户 %s 拉进一个群聊</code>，<code>I was dragged into a group chat by user %s</code></li><li><p>封装函数代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function tplParse(tpl, params) &#123;</span><br><span class="line">  let counter = 0;</span><br><span class="line">  if (params &amp;&amp; params.length &gt; 0) &#123;</span><br><span class="line">    let match;</span><br><span class="line">    while(match = tpl.match(/%s/)) &#123;</span><br><span class="line">      tpl = tpl.slice(0, match.index) + params[counter] + tpl.slice(match.index + 2);</span><br><span class="line">      counter ++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return tpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第一个参数是需要替换的文案，第二个参数就是替换的变量</p><h3 id="切换语言的时候遍历的数据无法生效。"><a href="#切换语言的时候遍历的数据无法生效。" class="headerlink" title="切换语言的时候遍历的数据无法生效。"></a>切换语言的时候遍历的数据无法生效。</h3><p>在切换语言的时候我们会发现，<code>router</code>的<code>index.js</code>中的语言无法切换。这是因为data是一次性生产的，平常的写法只能是在 data 初始化的时候拿到这些被国际化的值，并不能响应变化。查阅文案给出的方案是需要遍历的数据通过computed重新计算一遍在返回。由于出现的地方较多这种方案实现起来太复杂。暂时的解决方案是切换语言的时候刷新页面。</p></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里本篇文章就结束了，有问题的地方还请大家在评论区指出。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近的一个项目要给到国外的运营人员使用，所以需要实现国际化。这里就简单介绍一下&lt;code&gt;v-cli&lt;/code&gt;实现国际化的原理和需要注意的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;主要的实现原理是利用&lt;a href=&quot;http://kazupon.github.io/vue-i18n/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-i18n&lt;/a&gt;这个&lt;code&gt;vue&lt;/code&gt;插件，配合官方文档可以帮助我们很方便的实现国际化。&lt;/p&gt;
&lt;h2 id=&quot;实现步骤&quot;&gt;&lt;a href=&quot;#实现步骤&quot; class=&quot;headerlink&quot; title=&quot;实现步骤&quot;&gt;&lt;/a&gt;实现步骤&lt;/h2&gt;&lt;h3 id=&quot;安装vue-i18n插件&quot;&gt;&lt;a href=&quot;#安装vue-i18n插件&quot; class=&quot;headerlink&quot; title=&quot;安装vue-i18n插件&quot;&gt;&lt;/a&gt;安装&lt;code&gt;vue-i18n&lt;/code&gt;插件&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install vue-i18n --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="https://tmgycsz.github.io/categories/vue/"/>
    
    
      <category term="vue插件" scheme="https://tmgycsz.github.io/tags/vue%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>文字，英文溢出的处理方法</title>
    <link href="https://tmgycsz.github.io/2019/03/29/%E8%A1%A8%E6%A0%BC%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D%E6%88%AA%E6%96%AD%E5%A4%84%E7%90%86/"/>
    <id>https://tmgycsz.github.io/2019/03/29/表格英文单词截断处理/</id>
    <published>2019-03-29T01:42:19.276Z</published>
    <updated>2019-04-01T07:28:12.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时做后台系统表格的时候总会遇到2种情况，一是表格中文字过长需要换行，也有客户希望表格高度一致，文字溢出隐藏显示…的要求。以往都是随便百度一下就写了。但是最近在做国际化的时候英文单词换行会出现单词被截断情况。借此我重新翻阅了下文档。本篇文章就介绍一下文字溢出的处理的方法和相关css属性。</p><h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><div class="note info"><p>对于<code>non-CJK</code> (non-CJK 指非中文/日文/韩文) 文本。这里以英文举例</p></div><h4 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a><code>word-break</code></h4><ol><li><code>word-break</code>: <code>normal</code>;</li><li><code>word-break</code>: <code>break-all</code>;</li><li><code>word-break</code>: <code>keep-all</code>;</li><li><code>word-break</code>: <code>break-word</code>;</li></ol><ol><li><code>normal</code>和<code>keep-all</code>：队尾放不下一个单词的时候，只能在半角空格或连字符处换行。否则超出的部分溢出显示。<br> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/normal.png" alt></li><li><code>break-all</code>：队尾放不下一个单词的时候，先用单词前面的字母挤满这一行，多余的字母换行显示。<br> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/breakall.pn" alt></li><li><code>break-word</code>：队尾放不下一个单词的时候，可以在半角空格或连字符处换行，没有半角空格或连字符处和<code>break-all</code>的规则保持一致。<br> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/break-word.png" alt></li></ol><h4 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a><code>word-wrap</code></h4><ol><li><code>word-wrap</code>: <code>normal</code>;</li><li><code>word-wrap</code>: <code>break-word</code>;<div class="note info"><p>对于<code>non-CJK</code> (non-CJK 指非中文/日文/韩文) 文本。这里以英文举例</p></div></li><li><code>normal</code>：队尾放不下一个单词的时候，只能在半角空格或连字符处换行。否则超出的部分溢出显示。<br> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/normal.png" alt></li><li><code>break-word</code>：队尾放不下一个单词的时候，可以在半角空格或连字符处换行，没有半角空格或连字符处先用单词前面的字母挤满这一行，多余的字母换行显示。<br> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/break-word.png" alt></li></ol><div class="note info"><p>对于<code>CJK</code> (<code>CJK</code> 指中文/日文/韩文) 。这里以中文举例</p></div><p>以上的6个css属性除了<code>word-break</code>: <code>keep-all</code>其它5个属性效果一致。</p><ol><li><code>word-break</code>: <code>keep-all</code>：只能在半角空格或连字符处换行，没有半角空格或连字符处超出部分溢出显示。<br> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/ckeep-all.png" alt></li><li>其它5个属性：文字超出部分换行显示。<br> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/cnormal.png" alt></li></ol><h3 id="实现文字超过省略号"><a href="#实现文字超过省略号" class="headerlink" title="实现文字超过省略号"></a>实现文字超过省略号</h3><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个方法可以用来实现禁止剪切和复制网页内容…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;平时做后台系统表格的时候总会遇到2种情况，一是表格中文字过长需要换行，也有客户希望表格高度一致，文字溢出隐藏显示…的要求。以往都是随便百度一
      
    
    </summary>
    
      <category term="css" scheme="https://tmgycsz.github.io/categories/css/"/>
    
    
      <category term="日常bug" scheme="https://tmgycsz.github.io/tags/%E6%97%A5%E5%B8%B8bug/"/>
    
  </entry>
  
  <entry>
    <title>String笔记</title>
    <link href="https://tmgycsz.github.io/2019/03/11/String%E7%AC%94%E8%AE%B0/"/>
    <id>https://tmgycsz.github.io/2019/03/11/String笔记/</id>
    <published>2019-03-11T06:25:14.784Z</published>
    <updated>2019-03-11T07:59:44.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇做了一下数组的总结，在总结的过程中重新巩固了对数组的方法的使用，很多以前没记住的细节也一一捡了起来，这一篇Sring笔记也是为了重新复习下String的相关定义和用法。</p><h2 id="原生对象String"><a href="#原生对象String" class="headerlink" title="原生对象String"></a>原生对象String</h2><p>1 <code>JavaScript</code>的原生对象<code>String</code><br>关于<code>String</code>作为原生对象和构造函数的区别，上一篇数组有过详细的解析。这里就直接开始分析这两种情况下的<code>String</code>的使用。<br><a id="more"></a></p><h3 id="属性和方法使用"><a href="#属性和方法使用" class="headerlink" title="属性和方法使用"></a>属性和方法使用</h3><h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><p>这里的<code>length</code>属性只是<code>String对象</code>本身的<code>length</code>属性，其值为<code>1</code>。</p><h4 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h4><p><code>name</code>属性返回<code>String</code>对象名称。与<code>length</code>属性一样，其值为<code>String</code>。</p><h4 id="fromCharCode-方法"><a href="#fromCharCode-方法" class="headerlink" title="fromCharCode()方法"></a>fromCharCode()方法</h4><ol><li>一个参数：<ul><li>要转换的数据</li></ul></li><li>用法：返回使用指定的<code>Unicode</code>值序列创建的字符串。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(98,99,100);</span><br><span class="line">// &quot;bcd&quot;</span><br></pre></td></tr></table></figure></li></ol><div class="note danger"><p>注意：作用于高位编码，返回简单的高位编码的字符串，例如阿拉伯数字等等。</p></div><h3 id="fromCodePoint-方法。"><a href="#fromCodePoint-方法。" class="headerlink" title="fromCodePoint()方法。"></a>fromCodePoint()方法。</h3><ol><li>一个参数：<ul><li>要转换的数据</li></ul></li><li>用法：返回使用指定的代码点序列创建的字符串。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String.fromCodePoint(0x2F804);</span><br><span class="line">// &quot;你&quot;</span><br><span class="line">String.fromCharCode(0x2F804);</span><br><span class="line">// &quot;&quot;</span><br></pre></td></tr></table></figure></li></ol><div class="note danger"><p>注意：<code>String.fromCodePoint()</code>是<code>ES6</code>的新方法，被用来返回一对低位编码，从而可以完全表示这些高位编码字符。</p></div><h2 id="函数String"><a href="#函数String" class="headerlink" title="函数String"></a>函数String</h2><h3 id="创建规范"><a href="#创建规范" class="headerlink" title="创建规范"></a>创建规范</h3><p>字符串可以通过3个方式创建，字面量方式，<code>String</code>方法转化，以及<code>String</code>构造函数创建。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;12&quot;;</span><br><span class="line">let str2 = String(&quot;13&quot;);</span><br><span class="line">console.log(typeof(str));</span><br><span class="line">console.log(typeof(str2));</span><br><span class="line">str.__proto__ === String.prototype;</span><br><span class="line">str2.__proto__ === String.prototype;</span><br><span class="line">// string</span><br><span class="line">// string</span><br><span class="line">// true</span><br><span class="line">// true</span><br><span class="line"></span><br><span class="line">let str1 = new String(&quot;12&quot;);</span><br><span class="line">console.log(typeof(str1));</span><br><span class="line">str1.__proto__ === String.prototype;</span><br><span class="line">// object</span><br><span class="line">// true</span><br></pre></td></tr></table></figure></p><ol><li>字面量方式创建的字符串和<code>String方法</code>转化的字符串都是基本字符串。这些基本字符串没有属性和方法。而通过<code>String构造函数</code>创建的实例对象都是字符串对象，它继承<code>String原型</code>的上的属性和方法。</li><li>当基本字符串需要调用一个字符串对象才有的方法或者查询值的时候(基本字符串是没有这些方法的)，<code>JavaScript</code>会自动将基本字符串转化为字符串对象并且调用相应的方法或者执行查询。</li></ol><h3 id="实例方法（es5）"><a href="#实例方法（es5）" class="headerlink" title="实例方法（es5）"></a>实例方法（es5）</h3><p>通过构造函数<code>new String</code>创建的实例对象，它们的<code>__proto__</code>属性都是指向了<code>String构造函数</code>的原型对象，就继承了原型对象上的属性和方法。<br><div class="note success"><p><code>String.prototype.</code></p></div></p><h4 id="charAt-方法"><a href="#charAt-方法" class="headerlink" title="charAt()方法"></a>charAt()方法</h4><ol><li>一个参数：<ul><li><code>index</code> 字符串的索引，取值为整数。(<code>0</code>~<code>length-1</code>)。<ol><li>传入非数字或者不传则默认取索引为<code>0</code>的字符。</li><li>传入的数值大于取值范围(<code>0</code>~<code>length-1</code>)，返回空字符串。</li></ol></li></ul></li><li>用法：方法从一个字符串中返回指定索引的字符。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;123&quot;;</span><br><span class="line">console.log(str.charAt(0));</span><br><span class="line">console.log(str.charAt(1));</span><br><span class="line">console.log(str.charAt(2));</span><br><span class="line">console.log(str.charAt());</span><br><span class="line">console.log(str.charAt(&quot;0&quot;));</span><br><span class="line">console.log(str.charAt(5));</span><br><span class="line">// 打印结果</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">&quot;&quot;</span><br></pre></td></tr></table></figure></li></ol><h4 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h4><ol><li>多个参数：<ul><li><code>string1</code>， <code>string2...</code> 和原字符串连接的多个字符串。</li></ul></li><li>用法：方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let str1 = &quot;hello&quot;;</span><br><span class="line">let str2 = &quot;world&quot;;</span><br><span class="line">let str3 = str1 + str2;</span><br><span class="line">let str4 = str1.concat(str2);</span><br><span class="line">console.log(str1);</span><br><span class="line">console.log(str3);</span><br><span class="line">console.log(str4);</span><br><span class="line">let str5 = `$&#123;str1&#125;：$&#123;str2&#125;`</span><br><span class="line">console.log(str5);</span><br><span class="line"></span><br><span class="line">// 打印结果</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">&quot;helloworld&quot;</span><br><span class="line">&quot;helloworld&quot;</span><br><span class="line">&quot;hello：world&quot;</span><br></pre></td></tr></table></figure></li></ol><div class="note danger"><p>注意：</p><ol><li>性能上字符串拼接性能高于使用concat方法。</li><li>ES6的模板字符串拼接方便与其他未声明的字符串拼接。</li></ol></div><h4 id="indexOf-方法"><a href="#indexOf-方法" class="headerlink" title="indexOf()方法"></a>indexOf()方法</h4><ol><li>两个个参数：<ul><li><code>string</code><br>  指定查询的字符串。</li><li><code>index</code><ol><li>表示调用该方法的字符串中开始查找的位置，取值为整数，默认值为<code>0</code>。</li><li>查找的值是非空字符串。<ul><li><code>index</code> &lt; <code>0</code> 与传入默认值<code>0</code>返回结果一致。</li><li>如果<code>index</code> &gt;= <code>str.length</code>，则该方法返回<code>-1</code>。</li></ul></li><li>查找的值是空字符串。<ul><li><code>index</code> &lt;= <code>0</code> 时返回<code>0</code>。</li><li><code>0</code> &lt; <code>index</code> &lt;= <code>str.length</code>时返回<code>index</code>的值。</li><li><code>index</code> &gt; <code>str.length</code>时返回<code>str.length</code>。</li></ul></li></ol></li></ul></li><li>用法：方法返回调用String对象中第一次出现的指定值的索引，如果未找到该值，则返回-1。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;this is a question&quot;;</span><br><span class="line">let findStr = &quot;question&quot;;</span><br><span class="line">let emptyStr = &quot;&quot;;</span><br><span class="line">console.log(str.indexOf(findStr));</span><br><span class="line">console.log(str.indexOf(findStr, -1));</span><br><span class="line">console.log(str.indexOf(findStr, 20));</span><br><span class="line">console.log(str.indexOf(&quot;answer&quot;));</span><br><span class="line"></span><br><span class="line">console.log(str.indexOf(emptyStr, -1));</span><br><span class="line">console.log(str.indexOf(emptyStr, 15));</span><br><span class="line">console.log(str.indexOf(emptyStr, 20));</span><br><span class="line">// 打印结果</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">-1</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">15</span><br><span class="line">18</span><br></pre></td></tr></table></figure></li></ol><h4 id="lastIndexOf-方法"><a href="#lastIndexOf-方法" class="headerlink" title="lastIndexOf()方法"></a>lastIndexOf()方法</h4><ol><li>两个个参数：<ul><li><code>string</code><br>  指定查询的字符串。</li><li><code>index</code><ol><li>表示调用该方法的字符串中开始查找的位置，取值为整数，默认值为<code>str.length</code>。</li><li>查找的值是非空字符串<ul><li><code>index</code> &lt; <code>0</code> 则<code>index</code> = <code>0</code>。</li><li>如果 <code>index</code> &gt; <code>str.length</code>，则<code>index</code> = <code>str.length</code>。</li></ul></li><li>查找的值是空字符串<ul><li><code>index</code> &lt;= <code>0</code> 时返回<code>0</code>。</li><li><code>0</code> &lt; <code>index</code> &lt;= <code>str.length</code>时返回<code>index</code>的值。</li><li><code>index</code> &gt; <code>str.length</code>时返回<code>str.length</code>。</li></ul></li></ol></li></ul></li><li>用法：方法返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回<code>-1</code>。从该字符串的后面向前查找，从<code>index</code>处开始。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;this is a question&quot;;</span><br><span class="line">let findStr = &quot;question&quot;;</span><br><span class="line">let emptyStr = &quot;&quot;;</span><br><span class="line">console.log(str.lastIndexOf(findStr));</span><br><span class="line">console.log(str.lastIndexOf(findStr, 20));</span><br><span class="line">console.log(str.lastIndexOf(findStr, -1));</span><br><span class="line">console.log(str.lastIndexOf(&quot;answer&quot;));</span><br><span class="line"></span><br><span class="line">console.log(str.lastIndexOf(emptyStr, -1));</span><br><span class="line">console.log(str.lastIndexOf(emptyStr, 15));</span><br><span class="line">console.log(str.lastIndexOf(emptyStr, 20));</span><br><span class="line">// 打印结果</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">-1</span><br><span class="line">-1</span><br><span class="line">0</span><br><span class="line">15</span><br><span class="line">18</span><br></pre></td></tr></table></figure></li></ol><h4 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a>slice()方法</h4><ol><li>两个个参数：<ul><li><code>beginIndex</code><ol><li>开始提取字符串的索引位置，取值为整数。</li><li>如果为负数，则<code>beginIndex</code> = <code>str.length</code> + <code>beginIndex</code>;</li><li>如果省略该参数，<code>beginIndex = 0</code>。</li></ol></li><li>endIndex<ol><li>结束提取字符串的索引位置，取值为整数。</li><li>如果<code>endIndex</code> &lt; <code>0</code>，则<code>endIndex</code>= <code>str.length</code> + <code>endIndex</code>;</li><li>如果<code>endIndex</code> &gt; <code>str.length</code> - <code>1</code>，<code>slice</code>会一直提取到字符串末尾。</li><li>如果省略该参数，<code>slice</code>会一直提取到字符串末尾</li></ol></li></ul></li><li>用法：方法提取一个字符串的一部分，并返回一新的字符串。提取的新字符串包括<code>beginIndex</code>但不包括<code>endIndex</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;xiaohei like play basketball&quot;;</span><br><span class="line">console.log(str.slice());</span><br><span class="line">console.log(str.slice(0, 50));</span><br><span class="line">console.log(str.slice(-3));</span><br><span class="line">console.log(str.slice(0, -9));</span><br><span class="line">// 打印结果</span><br><span class="line">&quot;xiaohei like play basketball&quot;</span><br><span class="line">&quot;xiaohei like play basketball&quot;</span><br><span class="line">&quot;all&quot;</span><br><span class="line">&quot;xiaohei like play b&quot;</span><br></pre></td></tr></table></figure></li></ol><h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><ol><li>两个参数：<ul><li><code>separator</code><ol><li>指定表示每个拆分应发生的点的字符串。</li><li>如果省略，会返回有含有整个字符串元素的数组;</li><li>如果分隔符为空字符串，则将原字符串中每个字符的数组形式返回。</li></ol></li><li><code>limitNumber</code><ol><li>指定分割后返回数组的元素个数，取值为整数。</li><li>如果<code>limitNumber</code>&lt; <code>0</code>，则返回全部被分割的元素组成的数组;</li><li>如果<code>limitNumber</code>大于当前被分割的元素个数，则返回全部被分割的元素组成的数组。</li><li>如果<code>limitNumber</code>小于当前被分割的元素个数，则返回<code>limitNumber</code>个数的元素组成的数组。</li><li>如果省略该参数，则返回全部被分割的元素组成的数组。</li></ol></li></ul></li><li>用法：方法使用指定的分隔符字符串将一个<code>String</code>对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。不改变原有字符串。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;asd,12,2,321,21&quot;</span><br><span class="line">console.log(str.split(&quot;,&quot;, 0));</span><br><span class="line">console.log(str.split(&quot;,&quot;, -1));</span><br><span class="line">console.log(str.split(&quot;,&quot;));</span><br><span class="line">console.log(str.split(&quot;,&quot;, 3));</span><br><span class="line">console.log(str.split(&quot;,&quot;, 6));</span><br><span class="line"></span><br><span class="line">let str1 = &quot;today is sunday&quot;;</span><br><span class="line">console.log(str1.split());</span><br><span class="line">console.log(str1.split(&quot;&quot;));</span><br><span class="line"></span><br><span class="line">//打印结果</span><br><span class="line">[]</span><br><span class="line">[&quot;asd&quot;, &quot;12&quot;, &quot;2&quot;, &quot;321&quot;, &quot;21&quot;]</span><br><span class="line">[&quot;asd&quot;, &quot;12&quot;, &quot;2&quot;, &quot;321&quot;, &quot;21&quot;]</span><br><span class="line">[&quot;asd&quot;, &quot;12&quot;, &quot;2&quot;]</span><br><span class="line">[&quot;asd&quot;, &quot;12&quot;, &quot;2&quot;, &quot;321&quot;, &quot;21&quot;]</span><br><span class="line"></span><br><span class="line">[&quot;today is sunday&quot;]</span><br><span class="line">[&quot;t&quot;, &quot;o&quot;, &quot;d&quot;, &quot;a&quot;, &quot;y&quot;, &quot; &quot;, &quot;i&quot;, &quot;s&quot;, &quot; &quot;, &quot;s&quot;, &quot;u&quot;, &quot;n&quot;, &quot;d&quot;, &quot;a&quot;, &quot;y&quot;]</span><br></pre></td></tr></table></figure></li></ol><h4 id="substring-方法"><a href="#substring-方法" class="headerlink" title="substring()方法"></a>substring()方法</h4><ol><li>两个参数：<ul><li><code>startIndex</code><ol><li>截取字符串开始的索引，为一个整数。</li><li><code>startIndex</code> = <code>endIndex</code>，返回一个空字符串。</li><li><code>startIndex</code> &gt; <code>endIndex</code>则<code>startIndex</code> = <code>endIndex</code>而<code>endIndex</code> = <code>startIndex</code>。</li><li><code>startIndex</code> &lt; <code>0</code>或者<code>startIndex</code> = <code>NaN</code>, 则<code>startIndex</code> = <code>0</code>。</li><li><code>startIndex</code> &gt; <code>str.length</code> - <code>1</code> 则<code>startIndex</code> = <code>str.length - 1</code>。   </li></ol></li><li><code>endIndex</code><ol><li>截取字符串结束的索引，为一个整数。</li><li><code>endIndex</code> &lt; <code>0</code>或者<code>endIndex</code>=<code>NaN</code>, 则<code>endIndex</code>=<code>0</code>。</li><li><code>endIndex</code> &gt;<code>str.length - 1</code>则<code>endIndex= str.length - 1</code>。</li></ol></li></ul></li><li>用法：方法返回一个字符串在开始索引到结束索引之间字符串。不改变原有字符串。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;qwertydf&quot;;</span><br><span class="line">console.log(str.substring());</span><br><span class="line">console.log(str.substring(1, 1));</span><br><span class="line">console.log(str.substring(-1, 3));</span><br><span class="line">console.log(str.substring(-1, 20));</span><br><span class="line">console.log(str.substring(6, 0));</span><br><span class="line"></span><br><span class="line">// 打印结果</span><br><span class="line">&quot;qwertydf&quot;</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;qwe&quot;</span><br><span class="line">&quot;qwertydf&quot;</span><br><span class="line">&quot;qwerty&quot;</span><br></pre></td></tr></table></figure></li></ol><h4 id="toUpperCase-方法，toLocaleUpperCase-方法"><a href="#toUpperCase-方法，toLocaleUpperCase-方法" class="headerlink" title="toUpperCase()方法，toLocaleUpperCase()方法"></a>toUpperCase()方法，toLocaleUpperCase()方法</h4><div class="note info"><p><code>toUpperCase()</code>方法将调用该方法字符串值转换为大写形式，并返回。</p></div><div class="note info"><p><code>toLocaleUpperCase()</code>方法使用本地化<code>locale-specific</code>的大小写映射规则将输入的字符串转化成大写形式并返回结果字符串。</p></div><ol><li>参数：无。</li><li>用法：两个方法绝大多数情况下返回结果一致，对于一些特殊的语言会返回不同，（日常使用中没啥区别）。都不会改变原来字符串。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;helloworld, HI&quot;;</span><br><span class="line">str.toLocaleUpperCase(); // HELLOWORLD, HI</span><br><span class="line">str.toUpperCase(); // HELLOWORLD, HI</span><br></pre></td></tr></table></figure></li></ol><h4 id="toLowerCase-方法，toLocaleLowerCase-方法"><a href="#toLowerCase-方法，toLocaleLowerCase-方法" class="headerlink" title="toLowerCase()方法，toLocaleLowerCase()方法"></a>toLowerCase()方法，toLocaleLowerCase()方法</h4><div class="note info"><p><code>toLowerCase()</code>方法将调用该方法的字符串值转换为小写形式，并返回。</p></div><div class="note info"><p><code>toLocaleLowerCase()</code>方法使用本地化<code>locale-specific</code>的大小写映射规则将输入的字符串转化成小写形式并返回结果字符串。</p></div><ol><li>参数：无。</li><li>用法：两个方法绝大多数情况下返回结果一致，对于一些特殊的语言会返回不同，（日常使用中没啥区别）。都不会改变原来字符串。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;helloworld, HI&quot;;</span><br><span class="line">str.toLocaleLowerCase(); // helloworld, hi</span><br><span class="line">str.toLowerCase(); // helloworld, hi</span><br></pre></td></tr></table></figure></li></ol><h4 id="valueOf-方法，toString-方法"><a href="#valueOf-方法，toString-方法" class="headerlink" title="valueOf()方法，toString()方法"></a>valueOf()方法，toString()方法</h4><div class="note info"><p><code>valueOf()</code>：字符串或者字符串对象调用该方法返回的该字符串的基本字符串格式。</p></div><div class="note info"><p><code>toString()</code>：字符串或者字符串对象调用该方法返回的该字符串的基本字符串格式。</p></div><ol><li>参数：无。</li><li>用法：上文中提到了字符串的两个基本格式，基本字符串和字符串对象，而基本字符串在使用实例方法时，<code>JavaScript</code>会把它转化成字符串对象后再调用方法。所以无论是基本字符串还是字符串对象调用这两个方法，本质上是没有区别的。<code>valueOf()</code>方法通常在<code>JavaScript</code>内部被调用，而不是在代码里显示调用。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let baseStr = &quot;baseString&quot;;</span><br><span class="line">let objStr = new String(&quot;objectString&quot;);</span><br><span class="line">console.log(baseStr.toString());</span><br><span class="line">console.log(objStr);</span><br><span class="line">console.log(objStr.valueOf());</span><br><span class="line"></span><br><span class="line">// 打印结果</span><br><span class="line">&quot;baseString&quot;</span><br><span class="line">String &#123;0: &quot;o&quot;, 1: &quot;b&quot;, 2: &quot;j&quot;, 3: &quot;e&quot;, 4: &quot;c&quot;, 5: &quot;t&quot;, 6: &quot;S&quot;, 7: &quot;t&quot;, 8: &quot;r&quot;, 9: &quot;i&quot;, 10: &quot;n&quot;, 11: &quot;g&quot;&#125;</span><br><span class="line">&quot;objectString&quot;</span><br></pre></td></tr></table></figure></li></ol><h4 id="trim-方法"><a href="#trim-方法" class="headerlink" title="trim()方法"></a>trim()方法</h4><ol><li>参数：无。</li><li>用法：方法会从一个字符串的两端删除空白字符。方法并不影响原字符串本身。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;test&quot;;</span><br><span class="line">console.log(str.trim()); // test</span><br><span class="line">console.log(str); // test</span><br></pre></td></tr></table></figure></li></ol><h3 id="实例方法（ES6）"><a href="#实例方法（ES6）" class="headerlink" title="实例方法（ES6）"></a>实例方法（ES6）</h3><p>通过构造函数<code>new String</code>创建的实例对象，它们的<code>__proto__</code>属性都是指向了<code>String构造函数</code>的原型对象，就继承了原型对象上的属性和方法。<br><div class="note success"><p><code>String.prototype.</code></p></div></p><h4 id="includes-方法"><a href="#includes-方法" class="headerlink" title="includes()方法"></a>includes()方法</h4><ol><li>参数：两个参数。<ul><li><code>string</code><br>  指定查询的字符串。</li><li><code>index</code><ol><li>开始查询的位置，取值为整数。</li><li>取值不正确或不填默认从<code>0</code>开始。</li></ol></li></ul></li><li>用法：方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回<code>true</code>或<code>false</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;hello world&quot;;</span><br><span class="line">let str1 = &quot;world&quot;;</span><br><span class="line">console.log(str.includes(str, 0));</span><br><span class="line">console.log(str.includes(str1, 6));</span><br><span class="line">console.log(str.includes(str1, 20));</span><br><span class="line">console.log(str.includes(str1, &quot;ads&quot;));</span><br><span class="line">// 打印结果</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure></li></ol><h4 id="startWith-方法"><a href="#startWith-方法" class="headerlink" title="startWith()方法"></a>startWith()方法</h4><ol><li>参数：两个参数。<ul><li><code>string</code><br>  指定查询的字符串。</li><li><code>index</code><ol><li>开始查询的位置，取值为整数。</li><li>取值不正确或不填默认从<code>0</code>开始。</li></ol></li></ul></li><li>用法：方法用来判断当前字符串是否是以另外一个给定的子字符串<code>开头</code>的，根据判断结果返回<code>true</code>或<code>false</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;object is not found&quot;;</span><br><span class="line">console.log(str.startsWith(&quot;object&quot;, 1));</span><br><span class="line">console.log(str.startsWith(&quot;object&quot;));</span><br><span class="line">console.log(str.startsWith(&quot;object&quot;, &quot;sadas&quot;));</span><br><span class="line">// 打印结果</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure></li></ol><h4 id="endWith-方法"><a href="#endWith-方法" class="headerlink" title="endWith()方法"></a>endWith()方法</h4><ol><li>参数：两个参数。</li></ol><ul><li><code>string</code><br>  指定查询的字符串。</li><li><code>index</code><ol><li>开始查询的位置，取值为整数。</li><li>取值不正确或者不填默认字符串末尾是否已要查找的字符串结尾。</li><li>如果传值正确，则表示从<code>str.length</code>-<code>index</code>处往前的字符串是否以要查找的字符串结尾。</li></ol></li></ul><ol start="2"><li>用法：方法用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回<code>true</code>或<code>false</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;object,String&quot;;</span><br><span class="line">console.log(str.endsWith(&quot;object&quot;)); // false</span><br><span class="line">console.log(str.endsWith(&quot;String&quot;)); // true</span><br><span class="line"></span><br><span class="line">// 从str.length - index往前的字符串</span><br><span class="line">// 从7索引位置开始前面的字符串是否包含object</span><br><span class="line">console.log(str.endsWith(&quot;object&quot;, 6)); // true</span><br><span class="line"></span><br><span class="line">// 从6索引位置开始前面的字符串是否包含object</span><br><span class="line">console.log(str.endsWith(&quot;object&quot;, 7)); // false</span><br></pre></td></tr></table></figure></li></ol><h4 id="padStart-方法，-padEnd-方法"><a href="#padStart-方法，-padEnd-方法" class="headerlink" title="padStart()方法， padEnd()方法"></a>padStart()方法， padEnd()方法</h4><ol><li>参数：两个参数。<ul><li><code>length</code><ol><li>补全字符串的长度，取值为整数。</li><li>如果原字符串长度大于补全长度，则返回原字符串。</li></ol></li><li><code>string</code><ol><li>用来补全的字符串。</li><li>如果不填则以空字符串补全。</li><li>如果补全的字符串长度与原字符串长度相加大于了补全长度参数，则会截取大于补全长度的多余的补全字符串。</li></ol></li></ul></li><li>用法：方法用来在字符串头部/尾部补全不够指定长度的字符串，返回新的字符串，不改变原来字符串。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;1&quot;;</span><br><span class="line">console.log(str.padStart(3));</span><br><span class="line">console.log(str.padEnd(3));</span><br><span class="line">console.log(str.padStart(3, &quot;2&quot;));</span><br><span class="line">console.log(str.padEnd(3, &quot;2&quot;));</span><br><span class="line"></span><br><span class="line">let str1 = &quot;abcdefg&quot;;</span><br><span class="line">console.log(str1.padStart(10, &quot;hijklm&quot;));</span><br><span class="line">console.log(str1.padEnd(10, &quot;hijklm&quot;));</span><br><span class="line"></span><br><span class="line">let str2 = &quot;09-12&quot;</span><br><span class="line">console.log(str2.padStart(10, &quot;YYYY-MM-DD&quot;));</span><br><span class="line"></span><br><span class="line">let str3 = &quot;abc&quot;;</span><br><span class="line">console.log(str3.padStart(2));</span><br><span class="line">console.log(str3.padEnd(2, &quot;2222&quot;));</span><br><span class="line"></span><br><span class="line">// 打印结果</span><br><span class="line">&quot;  1&quot;</span><br><span class="line">&quot;1  &quot;</span><br><span class="line">&quot;221&quot;</span><br><span class="line">&quot;122&quot;</span><br><span class="line"></span><br><span class="line">&quot;hijabcdefg&quot;</span><br><span class="line">&quot;abcdefghij&quot;</span><br><span class="line">&quot;YYYY-09-12&quot;</span><br><span class="line"></span><br><span class="line">&quot;abc&quot;</span><br><span class="line">&quot;abc&quot;</span><br></pre></td></tr></table></figure></li></ol><h4 id="repeat-方法"><a href="#repeat-方法" class="headerlink" title="repeat()方法"></a>repeat()方法</h4><ol><li>参数：一个参数。<ul><li><code>number</code><ol><li>指定重复的次数，取值为整数。</li><li>取值为<code>0</code>表示重复<code>0</code>次，返回空字符串。</li><li>取值为<code>NaN</code>或者<code>(-1,0]</code>则<code>number</code> = <code>0</code>。</li><li>字符串转化成数字。</li><li>小于等于<code>-1</code>的数或者无限数都会报错。</li><li>小数直接取整。</li></ol></li></ul></li><li>用法：方法用来把原字符串重复n次，返回新字符串。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;a&quot;;</span><br><span class="line">console.log(str.repeat(0));</span><br><span class="line">console.log(str.repeat(2));</span><br><span class="line">console.log(str.repeat(2.9));</span><br><span class="line"></span><br><span class="line">console.log(str.repeat(&quot;asd&quot;));</span><br><span class="line">console.log(str.repeat(-0.9));</span><br><span class="line"></span><br><span class="line">console.log(str.repeat(&quot;2&quot;));</span><br><span class="line"></span><br><span class="line">console.log(str.repeat(-1));</span><br><span class="line">console.log(str.repeat(Infinity));</span><br><span class="line">// 打印结果</span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;aa&quot;</span><br><span class="line">&quot;aa&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;</span><br><span class="line">&quot;&quot;</span><br><span class="line"></span><br><span class="line">&quot;aaa&quot;</span><br><span class="line"></span><br><span class="line">&quot;Uncaught RangeError: Invalid count value&quot;</span><br><span class="line">&quot;Uncaught RangeError: Invalid count value&quot;</span><br></pre></td></tr></table></figure></li></ol><p><em>由于正则这块忘得差不多了，所以String与正则相关的方法会在后续完成正则的复习后再加上…</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇做了一下数组的总结，在总结的过程中重新巩固了对数组的方法的使用，很多以前没记住的细节也一一捡了起来，这一篇Sring笔记也是为了重新复习下String的相关定义和用法。&lt;/p&gt;
&lt;h2 id=&quot;原生对象String&quot;&gt;&lt;a href=&quot;#原生对象String&quot; class=&quot;headerlink&quot; title=&quot;原生对象String&quot;&gt;&lt;/a&gt;原生对象String&lt;/h2&gt;&lt;p&gt;1 &lt;code&gt;JavaScript&lt;/code&gt;的原生对象&lt;code&gt;String&lt;/code&gt;&lt;br&gt;关于&lt;code&gt;String&lt;/code&gt;作为原生对象和构造函数的区别，上一篇数组有过详细的解析。这里就直接开始分析这两种情况下的&lt;code&gt;String&lt;/code&gt;的使用。&lt;br&gt;
    
    </summary>
    
      <category term="Javascript原生对象" scheme="https://tmgycsz.github.io/categories/Javascript%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="Javascript原生对象" scheme="https://tmgycsz.github.io/tags/Javascript%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Array笔记</title>
    <link href="https://tmgycsz.github.io/2019/03/05/Array%E7%AC%94%E8%AE%B0/"/>
    <id>https://tmgycsz.github.io/2019/03/05/Array笔记/</id>
    <published>2019-03-05T11:00:55.710Z</published>
    <updated>2019-04-01T02:16:13.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数组是我们平时编码中必不可少的一个重要，无论是数据的处理还是数据的传递，它都起到了至关重要的作用。无论是老版的JavaScript还是ES6都提供了大量的方法让我们来对数组进行处理。本文主要介绍Array对象的本质和它的相关属性，方法。</p><h2 id="Array原型图"><a href="#Array原型图" class="headerlink" title="Array原型图"></a>Array原型图</h2><div class="note info"><p>原型链示意图</p></div><p><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/array.proto.png" alt><br><a id="more"></a><br><div class="note info"><p>分两个方向来分析</p></div></p><h2 id="原生对象Array"><a href="#原生对象Array" class="headerlink" title="原生对象Array"></a>原生对象Array</h2><p>作为JavaScript的原生对象Array</p><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><ul><li><p>按f12打开控制台输入<code>Array.</code>你会发现侧边出现了很长的一串的属性和方法的补全提示，这些属性和方法到底哪些是可用的又有哪些是<code>Array对象</code>本身的呢？我们可以试验一下。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">console.log(Array.length);</span><br><span class="line">console.log(Array.name);</span><br><span class="line">console.log(Array.from);</span><br><span class="line">console.log(Array.isArray);</span><br><span class="line">console.log(Array.of);</span><br><span class="line">console.log(Array.apply);</span><br><span class="line">console.log(Array.bind);</span><br><span class="line">console.log(Array.constructor);</span><br><span class="line">console.log(Array.toString);</span><br><span class="line">console.log(Array.hasOwnProperty);</span><br><span class="line">console.log(Array.isPrototypeOf);</span><br><span class="line">console.log(Array.toLocaleString);</span><br><span class="line">console.log(Array.valueOf);</span><br><span class="line"></span><br><span class="line">console.log(Array.arguments);</span><br><span class="line">console.log(Array.call);</span><br><span class="line">console.log(Array.caller);</span><br></pre></td></tr></table></figure></li><li><p>打印结果<br>  <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/array.function.png" alt></p></li><li><p>除了最后的3个属性报错其他的属性或方法全部被打印出来，但是这些不一定就是<code>Array</code>的本身的属性和方法。首先<code>Array</code>可以作为<code>函数实例对象</code>实际上可以看做是通过<code>new Function()</code>创建的，所以它继承了<code>Function原型对象</code>上的属性和方法，而<code>Function.prototype</code>作为对象是可以继承<code>Object原型对象</code>上的属性和方法。所以<code>Array</code>也继承了<code>Object</code>原型对象上的属性和方法。</p></li><li><p>我们可以通过Object的hasOwnProperty方法来判断哪些才是真正的属于Array对象的属性和方法。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">console.log(Array.hasOwnProperty(&quot;length&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;name&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;from&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;isArray&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;of&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;apply&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;bind&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;constructor&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;toString&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;hasOwnProperty&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;isPrototypeOf&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;toLocaleString&quot;));</span><br><span class="line">console.log(Array.hasOwnProperty(&quot;valueOf&quot;));</span><br><span class="line">//打印结果</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure> <div class="note info"><p>通过上面的分析我们知道了<code>Array</code>作为对象其实只拥有<code>length</code>，<code>name</code>两个属性和<code>form</code>，<code>isArray</code>，<code>of</code>这3个方法。</p></div> <div class="note danger"><p>注意：这里还有几个继承的方法和属性我没有一一列举出来更多属性可见详情[Array][4]</p></div></li></ul><h3 id="属性和方法使用"><a href="#属性和方法使用" class="headerlink" title="属性和方法使用"></a>属性和方法使用</h3><h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><p>返回<code>Array</code>对象的长度。这里的<code>length</code>属性只是<code>Array</code>本身的<code>length</code>属性，其值为1。</p><h4 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h4><p>返回<code>Array</code>对象名称。与<code>length</code>属性一样，其值为<code>Array</code>。</p><h4 id="form方法"><a href="#form方法" class="headerlink" title="form方法"></a>form方法</h4><p>转换其它类型的数据并返回一个新的数组。<br><div class="note success"><ul><li>参数1：要转换的数据</li><li>用法：</li></ul></div></p><ol><li><p>将类数组对象转换为真正数组</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let fakeArray = &#123;</span><br><span class="line">    0: &quot;csz&quot;, </span><br><span class="line">    1: &quot;women&quot;,</span><br><span class="line">    2: &quot;21&quot;,</span><br><span class="line">    3: [&quot;say&quot;,&quot;sleep&quot;,&quot;drink&quot;],</span><br><span class="line">    &apos;length&apos;: 4</span><br><span class="line">&#125;</span><br><span class="line">console.log(Array.from(fakeArray))</span><br><span class="line">// [&quot;csz&quot;, &quot;women&quot;, &quot;21&quot;, [&quot;say&quot;,&quot;sleep&quot;,&quot;drink&quot;]]</span><br></pre></td></tr></table></figure> <div class="note danger"><p>注意：要将一个类数组对象转换为一个真正的数组，必须具备以下条件：</p></div><ul><li>该类数组对象必须具有<code>length</code>属性，用于指定数组的长度。如果没有<code>length</code>属性，那么转换后的数组是一个空数组。</li><li>该类数组对象的属性名必须为数值型或字符串型的数字。如果不是转成的数组的值全是<code>undefined</code>。</li></ul></li><li><p>用法：将<code>Set</code>结构的数据转换为真正的数组：　</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5,5,6]</span><br><span class="line">let set = new Set(arr);</span><br><span class="line">console.log(Array.from(set)); </span><br><span class="line">// [1,2,3,4,5,6]</span><br></pre></td></tr></table></figure></li><li><p>用法：将字符串转换为数组：返回分割字符串形成的数组。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str = &apos;foo&apos;;</span><br><span class="line">console.log(Array.from(str));</span><br><span class="line">// [&quot;f&quot;,&quot;o&quot;,&quot;o&quot;]</span><br></pre></td></tr></table></figure></li><li><p>用法：<code>Array.from</code>参数是一个真正的数组：返回原数组。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Array.from([1,2,3,4,5]))</span><br><span class="line">// [1,2,3,4,5]</span><br></pre></td></tr></table></figure></li></ol><div class="note success"><ul><li>参数2：回调函数</li><li>用法：</li></ul></div><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(Array.from(arr, item =&gt; item + 1));</span><br><span class="line">// [2,3,4,5,6];</span><br></pre></td></tr></table></figure></code></pre><h4 id="isArray方法"><a href="#isArray方法" class="headerlink" title="isArray方法"></a>isArray方法</h4><p>用于判断一个对象是否为数组。<br><div class="note success"><ul><li>参数1：要判断的数据</li><li>用法：</li></ul></div><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3];</span><br><span class="line">let str = &quot;123&quot;;</span><br><span class="line">let num = 123;</span><br><span class="line">Array.isArray(arr);</span><br><span class="line">Array.isArray(str);</span><br><span class="line">Array.isArray(num);</span><br><span class="line">// 打印结果</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure></p><h4 id="of方法"><a href="#of方法" class="headerlink" title="of方法"></a>of方法</h4><p>用于创建一个新的数组。<br><div class="note success"><ul><li>参数1：创建的数据的元素</li><li>用法：</li></ul></div><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr = Array.of(1);</span><br><span class="line">let arr2 = Array.of(2);</span><br><span class="line">let arr3 = Array.of(1,2,3,4);</span><br><span class="line">//</span><br><span class="line">[1]</span><br><span class="line">[5]</span><br><span class="line">[1,2,3,4]</span><br></pre></td></tr></table></figure></p><div class="note danger"><p>注意：<code>form</code>和<code>of</code>都是<code>ES6</code>新增的方法。</p></div><h2 id="函数Array"><a href="#函数Array" class="headerlink" title="函数Array"></a>函数Array</h2><p>作为构造函数调用或者普通函数调用。</p><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>当数组作为函数调用而不是构造函数调用时，它会创建并初始化一个新的数组对象。因此当<code>Array(...)</code>和<code>new Array(...)</code>接收同样的参数时，它们是相同的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = Array(1,3);</span><br><span class="line">// [1,3];</span><br><span class="line">let arrs = new Array(1,3);</span><br><span class="line">// [1,3];</span><br></pre></td></tr></table></figure></p><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><ol><li><p>传入多个数值或者多个其它类型的数据的时候，直接以【，】分割这些数据形成一个新的数组。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arrStr = new Array(&quot;1&quot;, &quot;2&quot;);</span><br><span class="line">//[&quot;1&quot;,&quot;2&quot;]</span><br><span class="line">let arrObj = new Array(&#123;name: &quot;csz&quot;&#125;, &#123;&quot;age&quot;: 12&#125;);</span><br><span class="line">//[&#123;name: &quot;csz&quot;&#125;, &#123;age: 12&#125;]</span><br></pre></td></tr></table></figure></li><li><p>传入一个<code>0</code>到<code>232-1</code>之间的整数，会把它识别为创建的数组的长度，会创建一个这个以这个整数位长度，每一项都是<code>undefined</code>的数组。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = new Array(3);</span><br><span class="line">console.log(arr[0], arr[1], arr.length);</span><br><span class="line">// undefined, undefined, 3</span><br></pre></td></tr></table></figure></li><li><p>ES6新增的<code>of</code>方法没有第二种传参方式。</p></li></ol><h3 id="实例方法（ES5）"><a href="#实例方法（ES5）" class="headerlink" title="实例方法（ES5）"></a>实例方法（ES5）</h3><p>不管是通过字面量还是<code>new Array</code>亦或者是<code>Array.of()</code>创建的实例对象，它们的<code>__proto__</code>属性都是指向了<code>Array</code>的原型对象，就继承了原型对象上的属性和方法。<br><div class="note success"><p><code>Array.prototype.</code></p></div></p><h4 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h4><ol><li>两个参数：<ul><li><code>callback</code>接受3个参数。<ol><li><code>currentValue</code>，数组中正在处理的当前元素。</li><li><code>index</code>，数组中正在处理的当前元素的索引。</li><li><code>array</code>，<code>forEach</code>方法被调用的数组。</li></ol></li><li><code>thisArg</code><ol><li>执行<code>callback</code>函数时使用的<code>this</code>值。</li><li>如果<code>thisArg</code>参数有值，则每次<code>callback</code>函数被调用的时候，<code>this</code>都会指向<code>thisArg</code>参数上的这个对象。如果省略了<code>thisArg</code>参数,或者赋值为<code>null</code>或<code>undefined</code>，则<code>this</code>指向全局对象。</li></ol></li></ul></li><li>用法：数组调用该方法，每一个元素执行<code>callback</code>一次。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3];</span><br><span class="line">arr.forEach(function (v, i, arr) &#123;</span><br><span class="line">    console.log(v);</span><br><span class="line">    arr.push(1);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr);</span><br><span class="line">// 打印结果</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">[1,2,3,1,1,1]</span><br></pre></td></tr></table></figure></li></ol><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><ol><li>参数：无。</li><li>用法：方法从数组中删除第一个元素，并返回该元素的值。此方法更改原有数组。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3];</span><br><span class="line">console.log(arr.shift()); // 1</span><br><span class="line">console.log(arr); // [2,3]</span><br></pre></td></tr></table></figure></li></ol><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><ol><li>参数：无。</li><li>用法：方法从数组中删除最后一个元素，并返回该元素的值。此方法更改原有数组。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3];</span><br><span class="line">console.log(arr.pop()); // 3</span><br><span class="line">console.log(arr); // [1,2]</span><br></pre></td></tr></table></figure></li></ol><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><ol><li>一个参数<ul><li><code>elementN</code>要添加到数组开头的元素。</li></ul></li><li>用法：方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。此方法更改原有数组。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3];</span><br><span class="line">console.log(arr.unshift(4, 5)); // 5</span><br><span class="line">console.log(arr); // [4,5,1,2,3]</span><br></pre></td></tr></table></figure></li></ol><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><ol><li>一个参数<ul><li><code>elementN</code>要添加到数组开头的元素。</li></ul></li><li>用法：方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。此方法更改原有数组。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3];</span><br><span class="line">console.log(arr.push(4, 5)); // 5</span><br><span class="line">console.log(arr); // [1,2,3,4,5]</span><br></pre></td></tr></table></figure></li></ol><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><ol><li>三个参数<ul><li><code>start</code>​<br>  指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数）；如果负数的绝对值大于数组的长度，则表示开始位置为第<code>0</code>位。</li><li><code>deleteCount</code><ol><li>整数，表示要移除的数组元素的个数。</li><li>如果<code>deleteCount</code>是<code>0</code>或者负数，则不移除元素。这种情况下，至少应添加一个新元素。</li><li>如果<code>deleteCount</code>大于<code>start</code>之后的元素的总数，则从<code>start</code>后面的元素都将被删除（含第<code>start</code>位）。</li><li>如果<code>deleteCount</code>被省略，则其相当于(<code>arr.length - start</code>)。</li></ol></li><li><code>item1, item2, ...</code><br>  要添加进数组的元素,从<code>start</code>位置开始。如果不指定，则<code>splice()</code>将只删除数组元素。</li></ul></li><li>用法：方法通过删除现有元素和/或添加新元素来修改数组,并以数组返回原数组中被修改的元素。此方法更改原有数组。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5];</span><br><span class="line">// start超过数组长度，且没有添加新的元素</span><br><span class="line">console.log(arr.splice(5)); //[]</span><br><span class="line">console.log(arr); //[1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">// start不超过数组长度，且没有添加新的元素</span><br><span class="line">let arr1 = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(arr1.splice(0, 2)); //[1,2]</span><br><span class="line">console.log(arr1); //[3,4,5]</span><br><span class="line"></span><br><span class="line">// start不超过数组长度，删除个数为0或者负数，添加新的元素</span><br><span class="line">let arr2 = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(arr2.splice(0, 0, 1)); // []</span><br><span class="line">console.log(arr2); // [1,1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">// start为负数且负数绝对值不超过数据长度，添加新的元素</span><br><span class="line">let arr3 = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(arr3.splice(-3, 1, &quot;a&quot;)); //[3]</span><br><span class="line">console.log(arr3); //[1,2,&quot;a&quot;,4,5]</span><br><span class="line"></span><br><span class="line">// start为负数且负数绝对值超过数据长度，添加新的元素</span><br><span class="line">let arr4 = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(arr4.splice(-6, 1, &quot;a&quot;)); //[3]</span><br><span class="line">console.log(arr4); //[&quot;a&quot;,2,3,4,5]</span><br></pre></td></tr></table></figure></li></ol><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><ol><li>两个参数：<ul><li><code>start</code>​<ol><li>指定截取的开始位置（从<code>0</code>计数）。如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取。</li><li>省略就从<code>0</code>开始截取。</li><li>没有<code>end</code>就从开始位置截取，剩下的所有数组中的元素。</li></ol></li><li><code>end</code><ol><li>在该索引处结束提取原数组元素（从<code>0</code>开始）。</li><li><code>slice</code>会提取原数组中索引从<code>begin</code>到<code>end</code>的所有元素（包含<code>begin</code>，但不包含<code>end</code>）。</li></ol></li></ul></li><li>用法：方法通起止索引截取数组中的元素，返回一个新的数组对象。原始数组不会被改变。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5];</span><br><span class="line">// start为正数，没有end</span><br><span class="line">console.log(arr.slice(1)); //[2,3,4,5]</span><br><span class="line">console.log(arr); //[1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">let arr1 = [1, 2, 3, 4, 5];</span><br><span class="line">// start为正数，有end</span><br><span class="line">console.log(arr1.slice(1, 3)); //[2,3]</span><br><span class="line">console.log(arr1); //[1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">let arr2 = [1, 2, 3, 4, 5];</span><br><span class="line">// 两个参数都是负数</span><br><span class="line">console.log(arr2.slice(-3, -1)); //[3,4]</span><br><span class="line">console.log(arr2); //[1,2,3,4,5]</span><br></pre></td></tr></table></figure></li></ol><h4 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h4><ol><li>一个参数<ul><li><code>eparator</code><ol><li>指定一个字符串来分隔数组的每个元素。</li><li>默认为<code>,</code>。</li><li>如果<code>separator</code>是空字符串<code>&quot;&quot;</code>，则所有元素之间都没有任何字符。</li></ol></li></ul></li><li>用法：将一个数组的所有元素按指定分隔符连接成一个字符串并返回这个字符串，不改变原数组。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 3, 4];</span><br><span class="line">console.log(arr.join(&quot;&quot;)); // &quot;134&quot;</span><br><span class="line">console.log(arr.join(&quot;-&quot;)); // &quot;1-3-4&quot;</span><br><span class="line">// &quot;1&quot;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse() 方法"></a>reverse() 方法</h4><ol><li>参数：无。</li><li>用法：方法将数组中元素的位置颠倒。改变原数组。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5];</span><br><span class="line">console.log(arr.reverse()); // [5, 4, 3, 2, 1]</span><br><span class="line">console.log(arr) // [5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure></li></ol><h4 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h4><ol><li>参数：无。</li><li>用法：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 3, 4];</span><br><span class="line">let arr1 = [1, 2, &quot;a&quot;];</span><br><span class="line">console.log(arr.concat(arr1));</span><br><span class="line">// [1,3,4,1,2,&quot;a&quot;];</span><br></pre></td></tr></table></figure></li></ol><h4 id="indexOf-方法"><a href="#indexOf-方法" class="headerlink" title="indexOf()方法"></a>indexOf()方法</h4><ol><li>两个参数：<ul><li><code>searchElement</code> 要查找的元素。</li><li><code>fromIndex</code><ol><li>开始查找的位置。默认为<code>0</code></li><li><code>-1</code>代表数组中的最后一个元素，依次为起点往前查找。</li></ol></li></ul></li><li>用法：返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回<code>-1</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3];</span><br><span class="line">console.log(arr.indexOf(1)); // 0</span><br><span class="line">console.log(arr.indexOf(5)); // -1</span><br></pre></td></tr></table></figure></li></ol><h4 id="lastIndexOf-方法"><a href="#lastIndexOf-方法" class="headerlink" title="lastIndexOf()方法"></a>lastIndexOf()方法</h4><ol><li>两个参数：</li></ol><ul><li><code>searchElement</code>要查找的元素。</li><li><code>fromIndex</code><ol><li>从此位置开始逆向查找。默认为数组的长度减<code>1</code>，即整个数组都被查找。</li><li>如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。</li><li>即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回<code>-1</code>，即数组不会被查找。</li></ol></li></ul><ol start="2"><li>用法：返回指定元素在数组中的最后一个的索引，如果不存在则返回<code>-1</code>。从数组的后面向前查找，从传参的索引处开始。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 1];</span><br><span class="line">console.log(arr.lastIndexOf(1, 0)); // 3</span><br><span class="line">console.log(arr.lastIndexOf(1, 2)); // 0</span><br></pre></td></tr></table></figure></li></ol><h4 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h4><ol><li>参数：无。</li><li><p>用法：返回一个数组元素组成的字符串，以逗号分隔。不改变原数组。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3];</span><br><span class="line">console.log(arr.toString()); // &quot;1,2,3&quot;</span><br><span class="line">console.log(arr); // [1, 2, 3]</span><br></pre></td></tr></table></figure></li></ol><h4 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法"></a>map()方法</h4><ol><li>两个参数：<ul><li><code>callback</code>接受3个参数。<ol><li><code>currentValue</code>，数组中正在处理的当前元素。</li><li><code>index</code>，数组中正在处理的当前元素的索引。</li><li><code>array，map</code>方法被调用的数组。</li></ol></li><li><code>thisArg</code><ol><li>执行<code>callback</code>函数时使用的<code>this</code>值。</li><li>如果<code>thisArg</code>参数有值，则每次<code>callback</code>函数被调用的时候，<code>this</code>都会指向<code>thisArg</code>参数上的这个对象。如果省略了<code>thisArg</code>参数,或者赋值为<code>null</code>或<code>undefined</code>，则<code>this</code>指向全局对象。</li></ol></li></ul></li><li><p>用法：数组调用该方法，<code>callback</code>会循环遍历数组一次，最后返回一个每一次循环遍历处理后的结果组成的新数组。不会改变原有数组。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">    name: &apos;csz&apos;,</span><br><span class="line">    say: function () &#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let arr = [1, 2];</span><br><span class="line">let map1 = arr.map(function (value, index, array) &#123;</span><br><span class="line">    console.log(value, index, array);</span><br><span class="line">    this.say();</span><br><span class="line">    return value = value + 2;</span><br><span class="line">&#125;, obj);</span><br><span class="line">console.log(map1, arr);</span><br><span class="line">// 打印结果</span><br><span class="line">1 0 [1, 2]</span><br><span class="line">csz</span><br><span class="line">2 1 [1, 2]</span><br><span class="line">csz</span><br><span class="line">[3, 4] [1, 2]</span><br></pre></td></tr></table></figure> <div class="note danger"><p>因为箭头函数内的this指向是保持不变的，所以当要使用thisArg参数时，不要使用箭头函数。</p></div>    </li></ol><h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><ol><li>两个参数：<ul><li><code>callback</code>用来测试每个元素的函数，接受3个参数。<ol><li><code>currentValue</code>，数组中正在处理的当前元素。</li><li><code>index</code>，数组中正在处理的当前元素的索引。</li><li><code>array，every</code>方法被调用的数组。</li><li>遍历数组的每一个元素执行<code>callback</code>，只要有一个元素在执行<code>callback</code>的时候<code>return false</code>，<code>every</code>方法停止执行返回<code>false</code>。</li></ol></li><li><code>hisArg</code>执行<code>callback</code>时使用的<code>this</code>值。（使用方法用<code>map()</code>一致）</li></ul></li><li>用法：方法测试数组的所有元素是否都通过了指定函数的测试。全部通过返回<code>true</code>, 否则返回<code>false</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 3, 5, 7, 9, 10];</span><br><span class="line">let arr1 = [1, 3, 5, 7];</span><br><span class="line">console.log(arr.every((v, i, array) =&gt; &#123;</span><br><span class="line">    return v % 2 !== 0;</span><br><span class="line">&#125;));</span><br><span class="line">console.log(arr1.every((v, i, array) =&gt; &#123;</span><br><span class="line">    return v % 2 !== 0;</span><br><span class="line">&#125;));</span><br><span class="line">// 打印结果</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure></li></ol><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><ol><li>两个参数：<ul><li><code>callback</code>用来测试每个元素的函数，接受3个参数。<ol><li><code>currentValue</code>，数组中正在处理的当前元素。</li><li><code>index</code>，数组中正在处理的当前元素的索引。</li><li><code>array，every</code>方法被调用的数组。</li><li>遍历数组的每一个元素执行<code>callback</code>，只要有一个元素在执行<code>callback</code>的时候<code>return true</code>，<code>every</code>方法停止执行返回<code>true</code>。</li></ol></li><li><code>thisArg</code>执行<code>callback</code>时使用的<code>this</code>值。（使用方法用<code>map()</code>一致）</li></ul></li><li>用法：方法测试数组中的某些元素是否通过由提供的函数实现的测试。有一个通过返回<code>true</code>, 全部不通过返回<code>false</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 3, 5, 7, 9, 21, 2, 4, 6];</span><br><span class="line">console.log(arr.some((v, i, array) =&gt; &#123;</span><br><span class="line">    return v &gt; 10;</span><br><span class="line">&#125;));</span><br><span class="line">// true</span><br></pre></td></tr></table></figure></li></ol><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><ol><li>两个参数：<ul><li><code>callback</code>用来测试每个元素的函数，接受3个参数。<ol><li><code>currentValue</code>，数组中正在处理的当前元素。</li><li><code>index</code>，数组中正在处理的当前元素的索引。</li><li><code>array</code>，<code>filter</code>方法被调用的数组。</li><li>遍历数组的每一个元素执行<code>callback</code>，把满足条件的元素返回最后集合组成一个新的数组。</li></ol></li><li><code>thisArg</code>执行<code>callback</code>时使用的<code>this</code>值。（使用方法用<code>map()</code>一致）</li></ul></li><li>方法：方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];</span><br><span class="line">let newArr = arr.filter((v, i, array) =&gt; &#123;</span><br><span class="line">    return v % 2 === 0;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(newArr);</span><br><span class="line">// [2,4,6,8]</span><br></pre></td></tr></table></figure></li></ol><h3 id="实例方法（ES6）"><a href="#实例方法（ES6）" class="headerlink" title="实例方法（ES6）"></a>实例方法（ES6）</h3><p>不管是通过字面量还是<code>new Array</code>亦或者是<code>Array.of()</code>创建的实例对象，它们的<code>__proto__</code>属性都是指向了<code>Array</code>的原型对象，就继承了原型对象上的属性和方法。<br><div class="note success"><p><code>Array.prototype.</code></p></div></p><h4 id="includes-方法"><a href="#includes-方法" class="headerlink" title="includes()方法"></a>includes()方法</h4><ol><li>两个参数：<ul><li><code>searchElement</code>需要查找的元素值。- </li><li><code>fromIndex</code>从该索引处开始查找<code>searchElement</code>。如果为负值，则按升序从<code>array.length - fromIndex</code>的索引开始搜索。默认为<code>0</code>。</li></ul></li><li>用法：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回<code>true</code>，否则返回<code>false</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3];</span><br><span class="line">console.log(arr.includes(1)); // true</span><br><span class="line">console.log(arr.includes(5)); // false</span><br></pre></td></tr></table></figure></li></ol><h4 id="find-方法"><a href="#find-方法" class="headerlink" title="find()方法"></a>find()方法</h4><ol><li>两个参数：<ul><li><code>callback</code>用来测试每个元素的函数，接受3个参数。<ol><li><code>currentValue</code>，数组中正在处理的当前元素。</li><li><code>index</code>，数组中正在处理的当前元素的索引。</li><li><code>array，find</code>方法被调用的数组。</li><li>遍历数组的每一个元素执行<code>callback</code>，返回第一个满足条件的元素。</li></ol></li><li><code>thisArg</code>执行<code>callback</code>时使用的<code>this</code>值。（使用方法用<code>map()</code>一致）</li></ul></li><li>用法：方法返回数组中满足提供的测试函数的第一个元素的值。否则返回<code>undefined</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];</span><br><span class="line">let newArr = arr.find((v, i, array) =&gt; &#123;</span><br><span class="line">    return v &gt; 5;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(newArr);</span><br><span class="line">// 6</span><br></pre></td></tr></table></figure></li></ol><h4 id="findIndex-方法"><a href="#findIndex-方法" class="headerlink" title="findIndex()方法"></a>findIndex()方法</h4><ol><li>两个参数：<ul><li><code>callback</code>用来测试每个元素的函数，接受3个参数。<ol><li><code>currentValue</code>，数组中正在处理的当前元素。</li><li><code>index</code>，数组中正在处理的当前元素的索引。</li><li><code>array</code>，<code>findIndex</code>方法被调用的数组。</li><li>遍历数组的每一个元素执行<code>callback</code>，返回第一个满足条件的元素的索引。</li></ol></li><li><code>thisArg</code>执行<code>callback</code>时使用的<code>this</code>值。（使用方法用<code>map()</code>一致）</li></ul></li><li>用法：方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回<code>-1</code>。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];</span><br><span class="line">let newArr = arr.findIndex((v, i, array) =&gt; &#123;</span><br><span class="line">    return v &gt; 5;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(newArr);</span><br><span class="line">// 5</span><br></pre></td></tr></table></figure></li></ol><h4 id="fill-方法"><a href="#fill-方法" class="headerlink" title="fill()方法"></a>fill()方法</h4><p>方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。改变原数组。</p><ol><li>三个参数：<ul><li><code>start`</code>用来填充数组元素的值。</li><li><code>start</code>起始索引，默认值为0。</li><li><code>end</code>终止索引，默认值为<code>this.length</code>。</li></ul></li><li>用法 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5, 6];</span><br><span class="line">arr.fill(&quot;csz&quot;, 1, 4);</span><br><span class="line">console.log(arr);</span><br><span class="line">// [1, &quot;csz&quot;, &quot;csz&quot;, &quot;csz&quot;, 5, 6]</span><br></pre></td></tr></table></figure></li></ol><p><em>还有几个方法相关介绍我还没有理的很清楚，这里先不贴了。等后续会加上…</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;数组是我们平时编码中必不可少的一个重要，无论是数据的处理还是数据的传递，它都起到了至关重要的作用。无论是老版的JavaScript还是ES6都提供了大量的方法让我们来对数组进行处理。本文主要介绍Array对象的本质和它的相关属性，方法。&lt;/p&gt;
&lt;h2 id=&quot;Array原型图&quot;&gt;&lt;a href=&quot;#Array原型图&quot; class=&quot;headerlink&quot; title=&quot;Array原型图&quot;&gt;&lt;/a&gt;Array原型图&lt;/h2&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;原型链示意图&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/array.proto.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Javascript原生对象" scheme="https://tmgycsz.github.io/categories/Javascript%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="Javascript原生对象" scheme="https://tmgycsz.github.io/tags/Javascript%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>next主题优化</title>
    <link href="https://tmgycsz.github.io/2019/03/05/next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    <id>https://tmgycsz.github.io/2019/03/05/next主题优化/</id>
    <published>2019-03-05T02:22:16.390Z</published>
    <updated>2019-04-01T06:40:20.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近博客更新了一下主题，由之前的yilia主题更新成集成功能更齐全的next。借此也把搭建博客和优化主题的过程记录一下。</p><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ol><li><code>Node.js</code>下载安装: <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></li><li><code>git</code>下载安装：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></li><li><code>hexo</code>下载安装，搭建博客：</li><li><p>在桌面新建<code>test</code>目录，进入<code>test</code>目录右键选择<code>git Bash Here</code>在命令行界面初始化<code>hexo</code>（这里以<code>test</code>文件夹为例，文中后续都是以<code>test</code>文件夹作为根目录）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li><li><p>更新下载依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo install</span><br></pre></td></tr></table></figure></li><li><p>启动本地服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure> <div class="note success"><p>浏览器访问：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br>可以看到博客已经搭建在本地。</p></div></li></ol><a id="more"></a><h3 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到<code>github</code>上</h3><ol><li>创建<code>github</code>账号：<a href="https://github.com。（注册的邮箱一定要验证）" target="_blank" rel="noopener">https://github.com。（注册的邮箱一定要验证）</a></li><li>新建一个名为<code>&lt;github用户名&gt;.github.io</code>的仓库，比如说，如果你的<code>github</code>用户名是<code>mygithub</code>，那么你就新建<code>mygithub.github.io</code>的仓库。</li><li><p>安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>配置<code>ssh</code></p><ul><li><p>检查是否有<code>ssh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/. ssh #检查本机已存在的ssh密钥（No such file or directory 说明你是第一次使用git。）</span><br></pre></td></tr></table></figure></li><li><p>生成<code>ssh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮件地址&quot;（注册github时的邮箱）</span><br></pre></td></tr></table></figure></li><li><p>然后连续3次回车，复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>），粘贴到<code>New SSH Key</code>即可。打开你的<code>github</code>主页，进入个人设置 -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code>：<br><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/hexo1.png" alt>  </p></li></ul></li><li><p>测试是否成功配置<code>ssh</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p> 提示 <strong>Are you sure you want to continue connecting (yes/no)?</strong>，输入<code>yes</code>返回 <strong>“You’ve successfully authenticated”</strong> 即成功：   </p></li><li><p>修改<code>_config.yml</code>（在<code>test</code>目录下）。文件末尾添加下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure></li><li><p>推送到<code>GithubPages</code>。在命令行（即Git Bash）依次输入以下命令， 返回 <strong>INFO Deploy done: git</strong> 即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure> <div class="note success"><p>至此，<code>Hexo</code>博客已经搭建在<code>GithubPages</code>, 域名为<code>https://&lt;Github账号名称&gt;.github.io</code></p></div></li></ol><h2 id="主题选择和优化"><a href="#主题选择和优化" class="headerlink" title="主题选择和优化"></a>主题选择和优化</h2><h3 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h3><ol><li><p>这里我选择的是<code>next</code>主题，在<code>/test</code>目录下载主题文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>修改<code>/test</code>目录下的<code>_config.yml</code>文件，更改<code>theme</code>字段，为主题文件夹的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ theme: next</span><br></pre></td></tr></table></figure></li></ol><h3 id="主题基本配置"><a href="#主题基本配置" class="headerlink" title="主题基本配置"></a>主题基本配置</h3><h4 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h4><ol><li>修改<code>/test</code>目录下的<code>_config.yml</code>文件，选择语言<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans（默认为英文，zh-Hans为中文简体）</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置-作者昵称"><a href="#设置-作者昵称" class="headerlink" title="设置 作者昵称"></a>设置 作者昵称</h4><ol><li><code>/test</code>目录下的<code>_config.yml</code>文件，设置<code>author</code>为你的昵称。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author : &lt;你的昵称&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置-站点描述"><a href="#设置-站点描述" class="headerlink" title="设置 站点描述"></a>设置 站点描述</h4><ol><li>修改<code>/test</code>目录下的<code>_config.yml</code>文件，设置<code>description</code>字段为你的站点描述。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">description : 站点描述可以是你喜欢的一句签名:)</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置-侧边栏社交链接"><a href="#设置-侧边栏社交链接" class="headerlink" title="设置 侧边栏社交链接"></a>设置 侧边栏社交链接</h4><ol><li><p>修改<code>/test</code>目录下的<code>_config.yml</code>文件，设置<code>social</code>字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/your-user-name || github</span><br><span class="line">  Twitter: https://twitter.com/your-user-name || twitter</span><br><span class="line">  Weibo: http://weibo.com/your-user-name || weibo</span><br></pre></td></tr></table></figure></li><li><p>如果只想显示图标可以设置<code>social_icons</code>字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: true</span><br><span class="line">  transition: true</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置「背景动画」"><a href="#设置「背景动画」" class="headerlink" title="设置「背景动画」"></a>设置「背景动画」</h4><ol><li>修改<code>/test</code>目录下的<code>_config.yml</code>文件，有4款背景动画，选择你喜欢的设置为<code>true</code>即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: true</span><br><span class="line"></span><br><span class="line"># three_waves</span><br><span class="line">three_waves: false</span><br><span class="line"></span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: false</span><br><span class="line"></span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: false</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置「动画效果」"><a href="#设置「动画效果」" class="headerlink" title="设置「动画效果」"></a>设置「动画效果」</h4><ol><li>修改<code>/test</code>目录下的<code>_config.yml</code>文件，设置<code>motion</code>字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">motion</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure></li></ol><h4 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h4><p><code>next</code>提供了几种主题模式可供切换，选择一款你喜欢的</p><ol><li><code>/test/themes/next</code>目录下的<code>_config.yml</code>文件，全局查找<code>scheme</code>，选择一款打开注释<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置-菜单栏"><a href="#配置-菜单栏" class="headerlink" title="配置 菜单栏"></a>配置 菜单栏</h4><ol><li><p>修改<code>/test/themes/next</code>目录下的<code>_config.yml</code>文件，<code>menu</code>关键字下面的配置就是菜单栏，<code>next</code>的默认菜单配置</p><p> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/hexo2.png" alt><br>一般来说我们都会有自己的定制。给出我的配置以供参考</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  music: /music/ || music</span><br></pre></td></tr></table></figure><p> || 后面的内容为菜单栏的图标icon，就是<a href="https://fontawesome.com/?from=io" target="_blank" rel="noopener">Font Awesome</a>  图标名字</p><h4 id="配置优化-用户图像"><a href="#配置优化-用户图像" class="headerlink" title="配置优化 用户图像"></a>配置优化 用户图像</h4></li><li><p>修改<code>/test/themes/next</code>目录下的<code>_config.yml</code>文件，设置<code>avatar</code> 为一张图片，把你喜欢的图片下载并放到 <code>/test/themes/next/source/images</code>文件夹中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /images/&lt;图片名字&gt;.jpg</span><br></pre></td></tr></table></figure></li><li><p>找到主题配置文件：<code>/test/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</code><br>加入下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束</span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转</span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加「标签」页面"><a href="#添加「标签」页面" class="headerlink" title="添加「标签」页面"></a>添加「标签」页面</h4><ol><li>在<code>/test/source</code>目录下新建<code>tags</code>文件夹，在<code>/test/source/tags</code>下新建<code>index.md</code>，内容为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加「分类」页面"><a href="#添加「分类」页面" class="headerlink" title="添加「分类」页面"></a>添加「分类」页面</h4><ol><li>在<code>/test/source</code>目录下新建<code>categories</code>文件夹，在<code>/test/source/categories</code>下新建<code>index.md</code>，内容为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置-字体"><a href="#设置-字体" class="headerlink" title="设置 字体"></a>设置 字体</h4><ol><li>由于引用国外字体镜像较慢，所以nexT 开放了 5 个特定范围的字体设定来解决问题。修改<code>/test/themes/next</code>目录下的<code>_config.yml</code>文件。找到<code>font</code>关键字，替换它下面的内容为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # 外链字体库地址，例如 //fonts.googleapis.com (默认值)</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # 全局字体，应用在 body 元素上</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Monda</span><br><span class="line"></span><br><span class="line">  # 标题字体 (h1, h2, h3, h4, h5, h6)</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: Roboto Slab</span><br><span class="line"></span><br><span class="line">  # 文章字体</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line">  # Logo 字体</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lobster Two</span><br><span class="line">    size: 24</span><br><span class="line"></span><br><span class="line">  # 代码字体，应用于 code 以及代码块</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family: PT Mono</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置代码高亮"><a href="#设置代码高亮" class="headerlink" title="设置代码高亮"></a>设置代码高亮</h4><ol><li>修改<code>/test/themes/next</code>目录下的<code>_config.yml</code>文件。修改<code>highlight_theme</code>关键字，共有5款主题供你选择<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_theme: normal/night/night blue/night bright/night eighties</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置友情链接"><a href="#设置友情链接" class="headerlink" title="设置友情链接"></a>设置友情链接</h4><ol><li>修改<code>/test/themes/next</code>目录下的<code>_config.yml</code>文件。找到<code>Blog rolls</code>进行设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link （icon图标）</span><br><span class="line">links_title: 友情链接 （文字描述）</span><br><span class="line">#links_layout: block （设置链接是一行展示一条）</span><br><span class="line">links_layout: inline （设置链接是一行展示多条）</span><br><span class="line">links:</span><br><span class="line">  test: http://macshuo.com/ （链接的名字和地址）</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置博客置顶"><a href="#设置博客置顶" class="headerlink" title="设置博客置顶"></a>设置博客置顶</h4><ol><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></li><li><p>设置置顶标志：打开<code>/test/themes/*/layout/_macro/post.swig</code>在<code>&lt;div class=&quot;post-meta&quot;&gt;</code>下方插入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">   &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">   &lt;font color=808080&gt;置顶&lt;/font&gt;</span><br><span class="line">   &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在需要置顶的文章的Front-matter中加上top即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2018</span><br><span class="line">date: 2018-10-25 16:10:03</span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><h4 id="设置和优化打赏"><a href="#设置和优化打赏" class="headerlink" title="设置和优化打赏"></a>设置和优化打赏</h4><ol><li>点击进入<a href="https://cli.im/" target="_blank" rel="noopener">在线生成二维码</a>生成自己的微信和支付宝二维码。下载下来保存到<code>/test/themes/next/source/images</code>中</li><li><p>修改<code>/test/themes/next</code>目录下的<code>_config.yml</code>文件。找到<code>Reward</code>关键字进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-Reward</span><br><span class="line">reward_comment: 谢谢打赏，好人一生平安 （打赏的描述）</span><br><span class="line">wechatpay: /images/weixin.png （微信二维码）</span><br><span class="line">alipay: /images/zhifubao.png （支付宝二维码）</span><br></pre></td></tr></table></figure></li><li><p>移除打赏抖动，修改<code>/test/themes/next/source/css/_common/components/post/post-reward.styl</code>，注释以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* 注释文字闪动函数</span><br><span class="line">#wechat:hover p&#123;</span><br><span class="line">  animation: roll 0.1s infinite linear;</span><br><span class="line">  -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">  -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">#alipay:hover p&#123;</span><br><span class="line">  animation: roll 0.1s infinite linear;</span><br><span class="line">  -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">  -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">#bitcoin:hover p &#123;</span><br><span class="line">  animation: roll 0.1s infinite linear;</span><br><span class="line">  -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">  -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ol><h4 id="每篇文章后添加结束标语"><a href="#每篇文章后添加结束标语" class="headerlink" title="每篇文章后添加结束标语"></a>每篇文章后添加结束标语</h4><ol><li><p>新建文件，在<code>/test/themes/next/layout/_macro</code>中新建<code>passage-end-tag.swig</code>文件，添加代码至该文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size: 15px;letter-spacing: 5px;margin-top: 35px;&quot;&gt;----------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-----------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改post.swig，打开<code>/test/themes/next/layout/_macro/post.swig</code>文件，在<code>post-body</code>后，<code>post-footer</code>前，添加下面内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改_config，打开<code>/test/themes/next/</code>下的<code>_config.yml</code>，在末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加转载协议声明"><a href="#添加转载协议声明" class="headerlink" title="添加转载协议声明"></a>添加转载协议声明</h4><ol><li><p>打开<code>/test/themes/next/</code>下的<code>_config.yml</code>，找到<code>Declare license on posts</code>，配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Declare license on posts</span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  license: CC BY-NC-SA 3.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/</span><br></pre></td></tr></table></figure></li><li><p>打开<code>/test</code>下的<code>_config.yml</code>，找到<code>URL</code>，配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: &lt;你的github博客地址&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h3><h4 id="实现fork-me-on-github"><a href="#实现fork-me-on-github" class="headerlink" title="实现fork me on github"></a>实现fork me on github</h4><ol><li>选择样式<code>GitHub Ribbons</code>：<a href="https://github.blog/2008-12-19-github-ribbons/" target="_blank" rel="noopener">https://github.blog/2008-12-19-github-ribbons/</a></li><li>修改图片跳转链接,将<code>&lt;a href=&quot;https://github.com/you&quot;&gt;</code>中的链接换为自己Github链接</li><li>打开<code>/test/themes/next/layout/_layout.swig</code> 文件，把代码复制到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://github.com/tmgycsz/tmgycsz.github.io&quot; class=&quot;forkme&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">   &lt;img style=&quot;position: absolute; right: 0px;&quot; width=&quot;149&quot; height=&quot;149&quot; src=&quot;https://github.blog/wp-content/uploads/2008/12/forkme_right_white_ffffff.png?resize=149%2C149&quot; class=&quot;attachment-full size-full&quot; alt=&quot;Fork me on GitHub&quot; data-recalc-dims=&quot;1&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加点击爱心效果"><a href="#添加点击爱心效果" class="headerlink" title="添加点击爱心效果"></a>添加点击爱心效果</h4><ol><li><p>在<code>/test/themes/next/source/js/src</code>文件夹下创建<code>clicklove.js</code>，添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure></li><li><p>在<code>/test/themes/next/layout/_layout.swig</code>文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加网页崩溃欺骗特效"><a href="#添加网页崩溃欺骗特效" class="headerlink" title="添加网页崩溃欺骗特效"></a>添加网页崩溃欺骗特效</h4><ol><li><p>在<code>/test/themes/next/source/js/src</code>文件夹下创建<code>crash_cheat.js</code>，添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line"> var OriginTitle = document.title;</span><br><span class="line"> var titleTime;</span><br><span class="line"> document.addEventListener(&apos;visibilitychange&apos;, function () &#123;</span><br><span class="line">     if (document.hidden) &#123;</span><br><span class="line">         document.title = &apos;╭(°A°`)╮ 页面崩溃啦 ~&apos;;</span><br><span class="line">         clearTimeout(titleTime);</span><br><span class="line">     &#125;</span><br><span class="line">     else &#123;</span><br><span class="line">         document.title = &apos;(ฅ&gt;ω&lt;*ฅ) 噫又好了~&apos; + OriginTitle;</span><br><span class="line">         titleTime = setTimeout(function () &#123;</span><br><span class="line">             document.title = OriginTitle;</span><br><span class="line">         &#125;, 2000);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>在<code>/test/themes/next/layout/_layout.swig</code>文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/crash_cheat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加访问不蒜子统计"><a href="#添加访问不蒜子统计" class="headerlink" title="添加访问不蒜子统计"></a>添加访问不蒜子统计</h4><ol><li>打开<code>/test/themes/next/</code>下的<code>_config.yml</code>，找到<code>busuanzi_count</code>，配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true </span><br><span class="line">  total_visitors: true （总的访客人数）</span><br><span class="line">  total_visitors_icon: user （访客人数图标）</span><br><span class="line">  total_views: true （总的访问量）</span><br><span class="line">  total_views_icon: eye （访问量图标）</span><br><span class="line">  post_views: true （文章总阅读次数）</span><br><span class="line">  post_views_icon: eye（文章总阅读图标）</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加评论系统Valine"><a href="#添加评论系统Valine" class="headerlink" title="添加评论系统Valine"></a>添加评论系统Valine</h4><ol><li>请先注册<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>, 注册成功进入应用列表页面，创建应用。进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</li></ol><p><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/hexo3.png" alt></p><ol start="2"><li>打开<code>/test/themes/next/</code>下的<code>_config.yml</code>，找到<code>valine</code>，配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid:  dHAGLgRYVcYtd02p3WpBLKiQ-gzGzoHsz</span><br><span class="line">  appkey: DtL0hVwsWFyrDdw4QPWhg9zR</span><br><span class="line">  notify: false （邮件提醒，回复是否发送到邮箱）</span><br><span class="line">  verify: false （回复是否需要验证）</span><br><span class="line">  placeholder: Just go go （回复框占位符）</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: nick,mail,link （评论可以填写的信息）</span><br><span class="line">  pageSize: 10 # （每页显示多少条评论）</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加文章字数统计和预计阅读时间"><a href="#添加文章字数统计和预计阅读时间" class="headerlink" title="添加文章字数统计和预计阅读时间"></a>添加文章字数统计和预计阅读时间</h4><ol><li>打开<code>/test/themes/next/</code>下的<code>_config.yml</code>，找到<code>post_wordcount</code>，配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  totalcount: true</span><br><span class="line">  separated_meta: true`</span><br></pre></td></tr></table></figure></li></ol><h4 id="实现本地搜索"><a href="#实现本地搜索" class="headerlink" title="实现本地搜索"></a>实现本地搜索</h4><ol><li><p><code>/test</code>目录下下载插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>修改<code>/test</code>下的<code>_config.yml</code>，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li><li><p>打开<code>/test/themes/next/</code>下的<code>_config.yml</code>，找到<code>post_wordcount</code>，配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto （搜索方式：是输入的时候搜索还是回车或搜索键搜索）</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>next文档： <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p><div class="note info"><p>有什么问题欢迎在下方指出</p></div><p><em>还有其它优化，持续更新中。。。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近博客更新了一下主题，由之前的yilia主题更新成集成功能更齐全的next。借此也把搭建博客和优化主题的过程记录一下。&lt;/p&gt;
&lt;h2 id=&quot;搭建博客&quot;&gt;&lt;a href=&quot;#搭建博客&quot; class=&quot;headerlink&quot; title=&quot;搭建博客&quot;&gt;&lt;/a&gt;搭建博客&lt;/h2&gt;&lt;h3 id=&quot;搭建环境&quot;&gt;&lt;a href=&quot;#搭建环境&quot; class=&quot;headerlink&quot; title=&quot;搭建环境&quot;&gt;&lt;/a&gt;搭建环境&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Node.js&lt;/code&gt;下载安装: &lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt;下载安装：&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo&lt;/code&gt;下载安装，搭建博客：&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在桌面新建&lt;code&gt;test&lt;/code&gt;目录，进入&lt;code&gt;test&lt;/code&gt;目录右键选择&lt;code&gt;git Bash Here&lt;/code&gt;在命令行界面初始化&lt;code&gt;hexo&lt;/code&gt;（这里以&lt;code&gt;test&lt;/code&gt;文件夹为例，文中后续都是以&lt;code&gt;test&lt;/code&gt;文件夹作为根目录）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新下载依赖包&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动本地服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;浏览器访问：&lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:4000&lt;/a&gt;&lt;br&gt;可以看到博客已经搭建在本地。&lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://tmgycsz.github.io/categories/hexo/"/>
    
    
      <category term="next, hexo" scheme="https://tmgycsz.github.io/tags/next-hexo/"/>
    
  </entry>
  
  <entry>
    <title>右键自定义菜单</title>
    <link href="https://tmgycsz.github.io/2019/03/05/vue%E5%AE%9E%E7%8E%B0%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95/"/>
    <id>https://tmgycsz.github.io/2019/03/05/vue实现鼠标右键点击自定义菜单/</id>
    <published>2019-03-05T01:36:59.953Z</published>
    <updated>2019-04-01T03:27:54.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义菜单"><a href="#自定义菜单" class="headerlink" title="自定义菜单"></a>自定义菜单</h2><p>最近的后台管理项目中使用到了右侧标签栏方便用户切换不同模块。但当标签栏过多时一个个关闭明显示是反人类的，所以参考了<code>element admin</code>后写了一个自定义指令来实现点击鼠标右键实现自定义菜单。</p><h3 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图:"></a>最终效果图:</h3><p><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/meun.png" alt><br><a id="more"></a></p><h2 id="结构代码"><a href="#结构代码" class="headerlink" title="结构代码"></a>结构代码</h2><h3 id="ui部分"><a href="#ui部分" class="headerlink" title="ui部分"></a>ui部分</h3><div class="note info"><p>html代码：</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;tags_div&quot; v-menus&gt;</span><br><span class="line">    &lt;el-tag&gt;右键点击&lt;/el-tag&gt;</span><br><span class="line">    &lt;ul class=&quot;contextmenu&quot; :style=&quot;&#123;&apos;left&apos;: menuLeft, &apos;top&apos;: menuTop&#125;&quot; v-show=&quot;menuShow&quot;&gt;</span><br><span class="line">        &lt;li&gt;刷新&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;关闭&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;关闭其它&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;关闭所有&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="note success"><p>css代码：</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.tags_div &#123;</span><br><span class="line">  margin-top: 30px;</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.contextmenu &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  background: #fff;</span><br><span class="line">  width: 100px;</span><br><span class="line">  z-index: 100;</span><br><span class="line">  position: absolute;</span><br><span class="line">  list-style-type: none;</span><br><span class="line">  padding: 5px 0;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  font-weight: 400;</span><br><span class="line">  color: #333;</span><br><span class="line">  box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, .3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.contextmenu li &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 7px 16px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.contextmenu li:hover &#123;</span><br><span class="line">  background: #eee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这块没什么好说的，主要是设置子相父绝定位，鼠标点击的时候好去设置菜单栏的位置。</p><h2 id="自定义指令实现右键菜单栏"><a href="#自定义指令实现右键菜单栏" class="headerlink" title="自定义指令实现右键菜单栏"></a>自定义指令实现右键菜单栏</h2><p>自定义指令我在上篇已经介绍过了，这里主要说一下设计到的相关事件和属性（上篇自定义拖拽弹窗介绍过的这里不再列出）。</p><h3 id="相关属性-事件对象event，dom元素"><a href="#相关属性-事件对象event，dom元素" class="headerlink" title="相关属性(事件对象event，dom元素)"></a>相关属性(事件对象event，dom元素)</h3><ol><li><code>event.pageX：pageX</code>事件属性返回当事件被触发时鼠标指针向对于<code>html</code>的<code>body</code>的水平坐标。</li><li><code>event.pageY：pageY</code>事件属性返回当事件被触发时鼠标指针向对于<code>html</code>的<code>body</code>垂直坐标。</li><li><code>offsetParen</code>t属性：可以返回当前元素上个定位父级元素。</li></ol><h3 id="相关事件"><a href="#相关事件" class="headerlink" title="相关事件"></a>相关事件</h3><ol><li><code>oncontextmenu</code>：事件在元素中用户点击鼠标右键时触发。</li><li><code>onmouseup</code>：在用户松开鼠标按键时触发。</li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><div class="note default"><p>vue代码：</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">    menus: &#123;</span><br><span class="line">      inserted: function (el, binding, vnode) &#123;</span><br><span class="line">        //获取vue实例对象</span><br><span class="line">        let vm = vnode.context;</span><br><span class="line">        let showFlag = true;</span><br><span class="line">        vnode = vnode.elm;</span><br><span class="line">        //阻止默认浏览器的右键菜单</span><br><span class="line">        el.oncontextmenu = ((event) =&gt; &#123;</span><br><span class="line">          event.preventDefault();</span><br><span class="line">        &#125;);</span><br><span class="line">        el.onmouseup = ((event) =&gt; &#123;</span><br><span class="line">          if (event.button === 2) &#123;</span><br><span class="line">              vm.menuShow = true;</span><br><span class="line">              showFlag = false;</span><br><span class="line">              let realTop = vm.getElementToPageTop(vnode);</span><br><span class="line">              let realLeft = vm.getElementToPageLeft(vnode);</span><br><span class="line">              let top = event.pageY - realTop + 5 + &apos;px&apos;;</span><br><span class="line">              let left = event.pageX - realLeft + 5 + &apos;px&apos;;</span><br><span class="line">              vm.menuLeft = left;</span><br><span class="line">              vm.menuTop = top;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        document.onmouseup = (() =&gt; &#123;</span><br><span class="line">          if (showFlag) &#123;</span><br><span class="line">            vm.menuShow = false;</span><br><span class="line">          &#125;</span><br><span class="line">          showFlag = true;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">//vue实例数据</span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        menuShow: false,</span><br><span class="line">        menuLeft: 0,</span><br><span class="line">        menuTop: 0,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">//获取当前元素距离body原点的距离</span><br><span class="line">methods: &#123;</span><br><span class="line">    getElementToPageTop: function (el) &#123;</span><br><span class="line">       if (el.offsetParent) &#123;</span><br><span class="line">         return this.getElementToPageTop(el.offsetParent) + el.offsetTop;</span><br><span class="line">        &#125;</span><br><span class="line">       return el.offsetTop;</span><br><span class="line">    &#125;,</span><br><span class="line">    getElementToPageLeft: function (el) &#123;</span><br><span class="line">       if (el.offsetParent) &#123;</span><br><span class="line">         return this.getElementToPageLeft(el.offsetParent) + el.offsetLeft;</span><br><span class="line">       &#125;</span><br><span class="line">       return el.offsetLeft;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>首先是通过<code>oncontextmenu</code>阻止浏览器的上下文菜单，在绑定<code>onmouseup</code>事件判断鼠标右键点击。</li><li>获取当前元素距离<code>body</code>顶端的距离,在与鼠标在页面中的实际距离想减获取鼠标在div中的位置，进而设置菜单栏出现的位置。</li><li>给<code>document</code>绑定<code>onmouseup</code>事件，点击页面其他地方关闭菜单栏。</li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>获取当前元素距离<code>body</code>顶端的距离要判断当前元素有没有上级定位元素，如果有当前元素距离<code>body</code>顶端的距离是它的距离<code>body</code>顶端的距离与定位父级距离<code>body</code>顶端的距离之和。这里我写了两个递归来实现距离的计算<code>getElementToPageTop</code>，<code>getElementToPageLeft</code>。</li><li>点击其它的地方关闭菜单栏，这里在自定义指定的元素上点击右键时设置了一个标识，只有当这个标识为<code>false</code>的时候才不会关闭菜单栏。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个方法可以用来实现禁止剪切和复制网页内容…</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义菜单&quot;&gt;&lt;a href=&quot;#自定义菜单&quot; class=&quot;headerlink&quot; title=&quot;自定义菜单&quot;&gt;&lt;/a&gt;自定义菜单&lt;/h2&gt;&lt;p&gt;最近的后台管理项目中使用到了右侧标签栏方便用户切换不同模块。但当标签栏过多时一个个关闭明显示是反人类的，所以参考了&lt;code&gt;element admin&lt;/code&gt;后写了一个自定义指令来实现点击鼠标右键实现自定义菜单。&lt;/p&gt;
&lt;h3 id=&quot;最终效果图&quot;&gt;&lt;a href=&quot;#最终效果图&quot; class=&quot;headerlink&quot; title=&quot;最终效果图:&quot;&gt;&lt;/a&gt;最终效果图:&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/meun.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="https://tmgycsz.github.io/categories/vue/"/>
    
    
      <category term="vue组件" scheme="https://tmgycsz.github.io/tags/vue%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>自定义IconFont图标</title>
    <link href="https://tmgycsz.github.io/2019/03/04/%E8%87%AA%E5%AE%9A%E4%B9%89IconFont%E5%9B%BE%E6%A0%87/"/>
    <id>https://tmgycsz.github.io/2019/03/04/自定义IconFont图标/</id>
    <published>2019-03-04T06:55:07.195Z</published>
    <updated>2019-04-01T03:52:55.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的项目中，很多小的<code>icon</code>图片都是通过利用i标签的特性给它设置固定的宽高和背景来实现的。这种方法在项目大的时候一来需要依赖的图片会很多，二来css代码如果不规范的话也会出现很多问题。所以现在我在新项目中选择了<code>阿里巴巴的矢量图标库</code>来实现自定义<code>IconFont</code>图标。<br><a id="more"></a></p><h2 id="如何获取图标"><a href="#如何获取图标" class="headerlink" title="如何获取图标"></a>如何获取图标</h2><ol><li>首先我们进入阿里巴巴的矢量图标库<code>Iconfont</code>，<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里矢量图标库</a>，注册账号并登录。</li><li><p>在<code>图标管理</code>&gt;<code>我的项目</code>中新建项目。<br> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/icon1.png" alt></p><p> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/icon2.png" alt><br> <code>FontClass/Symbol</code>前缀是用来设置添加到项目中的<code>icon</code>的前缀名。<br><br> 而<code>Font Family</code>是用来设置字体图标的统一样式的。在后面的详细代码中可以看到具体作用。</p></li><li><p>在图标库中添加指定的图标到我的项目中</p><ul><li><p>添加选好的图标到购物车</p><p><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/icon3.png" alt>  </p></li><li><p>在购物车中添加到指定项目中</p><p><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/icon4.png" alt>      </p></li></ul></li><li><p>进入我的项目<br> 这里有3种格式，<code>Unicode/Font Class/Symbol</code>。其中<code>Unicode</code>图标的描述就是对应的字体编码，而另外两种就是我们新建项目时设置的前缀名加上图标的本身描述。这个可以修改。<br> <img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/icon5.png" alt>  </p></li><li><p>点击下载到本地会下载一个压缩包到本地。</p></li></ol><h2 id="修改下载文件"><a href="#修改下载文件" class="headerlink" title="修改下载文件"></a>修改下载文件</h2><p>解压压缩包。里面会有9个文件，有帮助使用的<code>html</code>本地文件和我们要引入的<code>iconfont.css</code>和<code>iconfont.js</code>文件。</p><ol><li><p><code>iconfont.css</code>详情</p><p><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/icon6.png" alt>  </p></li><li>修改iconfont.css，加上下面的代码去设置图标的大小和样式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[class^=&quot;test-&quot;], [class*=&quot; test-&quot;] &#123;</span><br><span class="line">/* 这个字段有可能是`fontFamily`也有可能是`iconfont`，具体与下载下来的`iconfont.css`中保持一致 */</span><br><span class="line">/* 第2步`如何获取图标`的`Font Family中设置的是什么就是什么 */</span><br><span class="line">   font-family:&quot;iconfont&quot; !important;</span><br><span class="line">   /* 以下内容参照第三方图标库本身的规则 */</span><br><span class="line">   font-size: 18px;</span><br><span class="line">   font-style:normal;</span><br><span class="line">   -webkit-font-smoothing: antialiased;</span><br><span class="line">   -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用方式1-v-cli项目中引用"><a href="#使用方式1-v-cli项目中引用" class="headerlink" title="使用方式1(v-cli项目中引用)"></a>使用方式1(v-cli项目中引用)</h2><h3 id="unicode引用"><a href="#unicode引用" class="headerlink" title="unicode引用"></a>unicode引用</h3><ol><li><code>unicode</code>是字体在网页端最原始的应用方式，特点是：<ul><li>兼容性最好，支持<code>ie6+</code>，及所有现代浏览器。</li><li>支持按字体的方式去动态调整图标大小，颜色等等。</li><li>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。</li><li>注意：新版<code>iconfon</code>t支持多色图标，这些多色图标在<code>unicode</code>模式下将不能使用，如果有需求建议使用<code>symbol</code>的引用方式</li></ul></li><li><p>unicode使用步骤如下：<br> 第一步：在v-cli项目main.js中引入iconfont.css。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./assets/icon/iconfont.css&apos;;</span><br></pre></td></tr></table></figure><p> 第二步：挑选相应图标并获取字体编码，应用于页面</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;fontFamily&quot;&gt;&amp;#xe6e1;&lt;/i&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="font-class引用"><a href="#font-class引用" class="headerlink" title="font-class引用"></a>font-class引用</h3><ol><li><code>font-class</code>是<code>unicode</code>使用方式的一种变种，主要是解决<code>unicode</code>书写不直观，语意不明确的问题；与<code>unicode</code>使用方式相比，具有如下特点：<ul><li>兼容性良好，支持<code>ie8+</code>，及所有现代浏览器。</li><li>相比于<code>unicode</code>语意明确，书写更直观。可以很容易分辨这个<code>icon</code>是什么。</li><li>因为使用<code>class</code>来定义图标，所以当要替换图标时，只需要修改<code>class</code>里面的<code>unicode</code>引用。</li><li>不过因为本质上还是使用的字体，所以多色图标还是不支持的。</li></ul></li><li><p>使用步骤如下：<br> 第一步：再v-cli项目main.js中引入iconfont.css。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./assets/icon/iconfont.css&apos;;</span><br></pre></td></tr></table></figure><p> 第二步：挑选相应图标并获取类名，应用于页面：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;el-icon-csz-xxx&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：这里不用加fontFamily是因为在（2 修改下载文件）中对前缀为el-icon-csz的样式进行了设置。</strong></p><h3 id="symbol引用"><a href="#symbol引用" class="headerlink" title="symbol引用"></a>symbol引用</h3><ol><li>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。这种用法其实是做了一个svg的集合，与另外两种相比具有如下特点：<ul><li>支持多色图标了，不再受单色限制。</li><li>通过一些技巧，支持像字体那样，通过<code>font-size,color</code>来调整样式。</li><li>兼容性较差，支持<code>ie9+</code>,及现代浏览器。</li><li>浏览器渲染<code>svg</code>的性能一般，还不如<code>png</code>。</li></ul></li><li><p>使用步骤如下：<br> 第一步：引入项目下面生成的symbol代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./assets/icon/iconfont.js&apos;;</span><br></pre></td></tr></table></figure><p> 第二步：在公用的main.css加入通用css代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.icon &#123;</span><br><span class="line">   width: 1em; height: 1em;</span><br><span class="line">   vertical-align: -0.15em;</span><br><span class="line">   fill: currentColor;</span><br><span class="line">   overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第三步：挑选相应图标并获取类名，应用于页面：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">  &lt;use xlink:href=&quot;#el-icon-csz-xxx&quot;&gt;&lt;/use&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用方式2-普通页面使用"><a href="#使用方式2-普通页面使用" class="headerlink" title="使用方式2(普通页面使用)"></a>使用方式2(普通页面使用)</h2><p>压缩包中的<code>demo_index.html</code>文件就是使用方式的帮助文档。可以按照他的教程进行引入。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><em>有什么不对的地方欢迎大家评论指出…</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在之前的项目中，很多小的&lt;code&gt;icon&lt;/code&gt;图片都是通过利用i标签的特性给它设置固定的宽高和背景来实现的。这种方法在项目大的时候一来需要依赖的图片会很多，二来css代码如果不规范的话也会出现很多问题。所以现在我在新项目中选择了&lt;code&gt;阿里巴巴的矢量图标库&lt;/code&gt;来实现自定义&lt;code&gt;IconFont&lt;/code&gt;图标。&lt;br&gt;
    
    </summary>
    
      <category term="常用工具" scheme="https://tmgycsz.github.io/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="常用工具之图标" scheme="https://tmgycsz.github.io/tags/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%B9%8B%E5%9B%BE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>编写可拖拽的弹窗</title>
    <link href="https://tmgycsz.github.io/2019/03/04/vue%E7%BC%96%E5%86%99%E5%8F%AF%E6%8B%96%E6%8B%BD%E7%9A%84%E5%BC%B9%E7%AA%97/"/>
    <id>https://tmgycsz.github.io/2019/03/04/vue编写可拖拽的弹窗/</id>
    <published>2019-03-04T06:09:28.486Z</published>
    <updated>2019-04-01T03:22:16.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可拖拽的弹窗"><a href="#可拖拽的弹窗" class="headerlink" title="可拖拽的弹窗"></a>可拖拽的弹窗</h2><blockquote><p>在刚刚重构完的项目中使用到了<code>element ui</code>框架，踩了不少坑也学到了不少的东西。其中比较麻烦的是它的<code>dialog</code>弹窗组件是无法移动拖拽的，然而客户又强烈的要求一定要有这个功能，所以就自己写了个可拖拽的弹窗组件。虽然拖拽起来不是很流畅，但是也算是满足要求了。</p></blockquote><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>主要的实现原理还是获取鼠标在<code>div</code>中的位置，获取位置后设置<code>div</code>的<code>left</code>和<code>top</code>来达到<code>div</code>跟随鼠标移动的效果。因为写的是<code>vue</code>，所以利用了<code>vue</code>的自定义指令来操作<code>dom</code>。</p><a id="more"></a><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="设计盒子ui"><a href="#设计盒子ui" class="headerlink" title="设计盒子ui"></a>设计盒子ui</h3><ol><li><p>老实说，我经常被吐槽没有审美，设计的样式总是被喷。好在这次是<code>dialog</code>弹窗，网上有大把的参考样式。我大体参考了<code>layer</code>的弹窗做出了一个山寨弹窗。</p><ul><li><p>html代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div class=&quot;m_showBox&quot; :class=&quot;skin&quot;&gt;</span><br><span class="line">   &lt;div class=&quot;showBox_mask&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;loading_wrap&quot; v-if=&quot;buttonstatus === 1&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;pop_box&quot; id=&quot;pox-box&quot; v-drag&gt;</span><br><span class="line">     &lt;p class=&quot;pop_box_title&quot;&gt;</span><br><span class="line">       &#123;&#123;title || &quot;提示&quot;&#125;&#125;</span><br><span class="line">       &lt;span class=&quot;pop_box_close&quot; @click=&quot;cancel&quot;&gt;&lt;/span&gt;</span><br><span class="line">     &lt;/p&gt;</span><br><span class="line">     &lt;div class=&quot;pop_box_content&quot;&gt;</span><br><span class="line">       &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;div class=&quot;pop_box_bottom&quot;&gt;</span><br><span class="line">       &lt;a href=&quot;javascript:;&quot;</span><br><span class="line">          class=&quot;cancel_btn&quot;</span><br><span class="line">          @click=&quot;cancel&quot;&gt;&#123;&#123;canceltext || &quot;取消&quot;&#125;&#125;&lt;/a&gt;</span><br><span class="line">       &lt;a href=&quot;javascript:;&quot;</span><br><span class="line">          class=&quot;confirm_btn&quot;</span><br><span class="line">          v-if=&quot;type === &apos;confirm&apos;&quot;</span><br><span class="line">          :class=&quot;&#123;widths: buttonstatus === 1&#125;&quot;</span><br><span class="line">          @click=&quot;confirm&quot;&gt;</span><br><span class="line">         &lt;svg viewBox=&quot;25 25 50 50&quot; class=&quot;u-circular&quot; v-if=&quot;buttonstatus === 1&quot;&gt;</span><br><span class="line">           &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;20&quot; fill=&quot;none&quot; class=&quot;path&quot;&gt;&lt;/circle&gt;</span><br><span class="line">         &lt;/svg&gt;</span><br><span class="line">         &lt;span :class=&quot;&#123;&apos;marginLeft&apos;: buttonstatus === 1&#125;&quot;&gt;&#123;&#123;confirmtext || &apos;确定&apos;&#125;&#125;&lt;/span&gt;</span><br><span class="line">       &lt;/a&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>css</code>代码太长放到<code>github</code>上了[vueDrag.vue][1]</p></li><li><p>效果图：</p><p><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/drag.png" alt></p></li></ul></li><li><p>设计要点:</p><ul><li>背景遮罩<br>我这里选择了使用了3个遮罩板，第一块是覆盖全屏幕的白色遮罩<code>m_showBox</code>使用fixed定位，让弹窗的所有内容与浏览器之间不会出现留白。第2块就是上图看到的灰色背景<code>showBox_mask</code>，用来突显弹窗。最后一块是点击确定的遮罩窗<code>loading_wrap</code>，来防止提交<code>ajax</code>时，用户点击按钮或修改弹窗数据。</li><li>弹窗构成<br>这里的弹窗就包括标题，内容和底部部分。内容部分通过插槽插入内容，底部按钮通过<code>svg</code>来实现提交加载的<code>loading</code>效果。</li></ul></li></ol><h3 id="定义组件props"><a href="#定义组件props" class="headerlink" title="定义组件props"></a>定义组件<code>props</code></h3><p>通过传入的<code>props</code>值来设置弹窗的样式和文案。<br><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/drag-props.png" alt></p><h3 id="自定义事件实现按钮回调"><a href="#自定义事件实现按钮回调" class="headerlink" title="自定义事件实现按钮回调"></a>自定义事件实现按钮回调</h3><p><code>confirm</code>和<code>cancel</code>自定义事件，定义自定义按钮事件，使用<code>$emit</code>触发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    cancel: function () &#123;</span><br><span class="line">      this.$emit(&quot;cancel&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    confirm: function () &#123;</span><br><span class="line">      if (this.buttonstatus === 1) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      this.$emit(&quot;confirm&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="自定义指令drag实现拖拽效果"><a href="#自定义指令drag实现拖拽效果" class="headerlink" title="自定义指令drag实现拖拽效果"></a>自定义指令<code>drag</code>实现拖拽效果</h3><h4 id="vue的directives。"><a href="#vue的directives。" class="headerlink" title="vue的directives。"></a><code>vue</code>的<code>directives</code>。</h4><p>通过<code>vue</code>自定义指令获取绑定的元素，在对<code>DOM</code>进行操作。关于更多<code>vue</code>自定义指令用法，移步<a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></p><h4 id="相关属性-事件对象event，dom元素，window对象-。"><a href="#相关属性-事件对象event，dom元素，window对象-。" class="headerlink" title="相关属性(事件对象event，dom元素，window对象)。"></a>相关属性(事件对象<code>event</code>，<code>dom</code>元素，<code>window</code>对象)。</h4><ol><li><code>event.clientX</code>：<code>clientX</code>事件属性返回当事件被触发时鼠标指针向对于浏览器可视区域的水平坐标。</li><li><code>event.clientY</code>：<code>clientY</code>事件属性返回当事件被触发时鼠标指针向对于浏览器页面可视区域的垂直坐标。</li><li><code>offsetLeft/offsetLeftTop</code>属性：可以返回当前元素距离某个定位父辈元素左边与顶部的距离（虽然我的父级遮罩层有了定位，但是它的宽高都是与<code>body</code>保持一致的）。</li><li><code>offsetWidth/offsetHeight</code>: 返回任何一个元素宽/高度，包括边框和填充</li><li><code>window.innerHeight/Width</code>: 获取当前页面可视区的宽高（包括滚动条）。</li></ol><h4 id="相关事件"><a href="#相关事件" class="headerlink" title="相关事件"></a>相关事件</h4><p><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/drag-event.png" alt></p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">      drag: &#123;</span><br><span class="line">        inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">          vnode = vnode.elm;</span><br><span class="line">          el.onmousedown = <span class="function">(<span class="params">(event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.target.className !== <span class="string">"pop_box_title"</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取鼠标在盒子中的位置</span></span><br><span class="line">            <span class="keyword">let</span> mouseX = event.clientX - vnode.offsetLeft;</span><br><span class="line">            <span class="keyword">let</span> mouseY = event.clientY - vnode.offsetTop;</span><br><span class="line">            <span class="comment">//绑定移动和停止函数</span></span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="function">(<span class="params">(event</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> left, top;</span><br><span class="line">              <span class="comment">//获取新的鼠标位置对应下的盒子应该在的位置</span></span><br><span class="line">              left = event.clientX - mouseX;</span><br><span class="line">              top = event.clientY - mouseY;</span><br><span class="line">              <span class="comment">//获取div在页面中X轴的最小最大位置</span></span><br><span class="line">              <span class="keyword">let</span> minX = vnode.offsetWidth / <span class="number">2</span>;</span><br><span class="line">              <span class="keyword">let</span> maxX = (<span class="built_in">window</span>.innerWidth - vnode.offsetWidth / <span class="number">2</span>) - <span class="number">10</span><span class="comment">//去掉滚动条的宽度</span></span><br><span class="line">              <span class="keyword">if</span> (left &lt;= minX) &#123;</span><br><span class="line">                left = minX;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt;= maxX) &#123;</span><br><span class="line">                left = maxX;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//获取div在页面中Y轴的最大最小位置</span></span><br><span class="line">              <span class="keyword">let</span> minY = vnode.offsetHeight / <span class="number">2</span>;</span><br><span class="line">              <span class="keyword">let</span> maxY = (<span class="built_in">window</span>.innerHeight - vnode.offsetHeight / <span class="number">2</span>);</span><br><span class="line">              <span class="keyword">if</span> (top &lt;= minY) &#123;</span><br><span class="line">                top = minY;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt;= maxY) &#123;</span><br><span class="line">                top = maxY;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//赋值移动</span></span><br><span class="line">              vnode.style.left = left + <span class="string">'px'</span>;</span><br><span class="line">              vnode.style.top = top + <span class="string">'px'</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="built_in">document</span>.onmouseup = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="built_in">document</span>.onmousemove = <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="built_in">window</span>.onresize = <span class="function">(<span class="params">(</span>) =&gt;</span>&#123;</span><br><span class="line">            vnode.style.left = <span class="string">"50%"</span>;</span><br><span class="line">            vnode.style.top = <span class="string">"50%"</span>;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h4><ol><li>给弹窗绑定<code>onmousedown</code>事件，获取到鼠标在弹窗中的位置（以弹窗左上角为原点）。</li><li><code>document</code>绑定<code>onmousemove</code>事件，获取当前的鼠标位置，当前鼠标位置减去鼠标在弹窗的相当位置即可得到此时弹窗应该处于的位置。然后在通过<code>style</code>设置弹窗的位置。</li><li>鼠标松开解绑<code>document</code>的鼠标事件。</li></ol><blockquote><p>注意点：</p></blockquote><ol><li>弹窗要一直在页面可视区移动，最大的移动距离就是可视区的宽高减去盒子本身的宽高(还要考虑到浏览器的滚动条的宽高，我的浏览器滚动条是自己设置的，高度为0，宽度为10)。<br><code>window.innerHeight - vnode.offsetHeight / 2</code>;<br><code>(window.innerWidth - vnode.offsetWidth / 2) - 10</code>;</li><li>只有弹窗标题才能拖拽，所以判断非标题部分之间<code>return</code>。</li><li>浏览器窗口大小改变会影响弹窗的位置，监听改变浏览器窗口改变把弹窗居中。</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="单独引用"><a href="#单独引用" class="headerlink" title="单独引用"></a>单独引用</h4><ol><li>下载<code>drag.vue</code>。<a href="https://github.com/tmgycsz/blog.demo/blob/master/vue.demo/vue.drag/dragDiv.vue" target="_blank" rel="noopener">vueDrag.vue</a>。</li><li><img src="https://raw.githubusercontent.com/tmgycsz/article-pictures/master/picture/drag-single.png" alt></li><li><p>控制弹窗的显示隐藏通过<code>v-if</code>绑定<code>data</code>里的数据即可。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=<span class="string">"el-fade-in"</span>&gt;</span><br><span class="line">    &lt;v-drag v-<span class="keyword">if</span>=<span class="string">"isShow"</span> :tilte=<span class="string">"title"</span> :type=<span class="string">"type"</span> @confirm=<span class="string">"confirmSubmit"</span> @cancel=<span class="string">"cancel"</span> :buttonstatus=<span class="string">"buttonstatus"</span>&gt;</span><br><span class="line">      &lt;el-form label-width=<span class="string">"100px"</span>&gt;</span><br><span class="line">        &lt;el-form-item label=<span class="string">"用户名称："</span>&gt;</span><br><span class="line">          &lt;el-input placeholder=<span class="string">"请输入用户名"</span> v-model=<span class="string">"username"</span>&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="密码："&gt;</span><br><span class="line">          &lt;el-input placeholder="请输入密码" v-model="password"&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/v-drag&gt;</span><br><span class="line"> &lt;/transition&gt;</span><br></pre></td></tr></table></figure> <div class="note info"><p>相关的属性和emit方法需要自己定义</p></div></li></ol><h4 id="v-cli全局引入"><a href="#v-cli全局引入" class="headerlink" title="v-cli全局引入"></a>v-cli全局引入</h4><ol><li><code>src</code>目录下新建<code>components</code>目录，下载<code>vueDrag.vue</code>到此目录下。</li><li><p><code>components</code>目录下新建<code>index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import VueDrag form ./vueDrag.vue</span><br><span class="line"></span><br><span class="line">export default function install(Vue) &#123;</span><br><span class="line">Vue.component(&quot;app-drag&quot;, VueDrag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>main.js</code>中加入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import appComponents from &quot;./components/index.js&quot;;</span><br><span class="line">Vue.use(appComponents);</span><br></pre></td></tr></table></figure></li><li><p>页面中使用<code>&lt;app-drag&gt;&lt;/app-drag&gt;</code></p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>关于这个组件我觉得还有很多优化的地方，望各位大佬给出意见。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;可拖拽的弹窗&quot;&gt;&lt;a href=&quot;#可拖拽的弹窗&quot; class=&quot;headerlink&quot; title=&quot;可拖拽的弹窗&quot;&gt;&lt;/a&gt;可拖拽的弹窗&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在刚刚重构完的项目中使用到了&lt;code&gt;element ui&lt;/code&gt;框架，踩了不少坑也学到了不少的东西。其中比较麻烦的是它的&lt;code&gt;dialog&lt;/code&gt;弹窗组件是无法移动拖拽的，然而客户又强烈的要求一定要有这个功能，所以就自己写了个可拖拽的弹窗组件。虽然拖拽起来不是很流畅，但是也算是满足要求了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;主要的实现原理还是获取鼠标在&lt;code&gt;div&lt;/code&gt;中的位置，获取位置后设置&lt;code&gt;div&lt;/code&gt;的&lt;code&gt;left&lt;/code&gt;和&lt;code&gt;top&lt;/code&gt;来达到&lt;code&gt;div&lt;/code&gt;跟随鼠标移动的效果。因为写的是&lt;code&gt;vue&lt;/code&gt;，所以利用了&lt;code&gt;vue&lt;/code&gt;的自定义指令来操作&lt;code&gt;dom&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="vue组件" scheme="https://tmgycsz.github.io/categories/vue%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="vue组件" scheme="https://tmgycsz.github.io/tags/vue%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tmgycsz.github.io/2019/02/27/hello-world/"/>
    <id>https://tmgycsz.github.io/2019/02/27/hello-world/</id>
    <published>2019-02-27T06:14:46.215Z</published>
    <updated>2019-03-11T08:27:05.794Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new page&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hello" scheme="https://tmgycsz.github.io/categories/hello/"/>
    
    
      <category term="hello" scheme="https://tmgycsz.github.io/tags/hello/"/>
    
  </entry>
  
</feed>
